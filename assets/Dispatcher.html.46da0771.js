import{r as o,o as p,c,a as n,b as t,F as i,d as s,e}from"./app.7d274c27.js";import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";const u={},r=n("h1",{id:"\u4E0A\u4E0B\u6587\u4E0E\u5206\u6D3E\u5668",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u4E0A\u4E0B\u6587\u4E0E\u5206\u6D3E\u5668","aria-hidden":"true"},"#"),s(" \u4E0A\u4E0B\u6587\u4E0E\u5206\u6D3E\u5668")],-1),k=s("\u534F\u7A0B\u603B\u662F\u5728 Kotlin \u6807\u51C6\u5E93\u4E2D\u5B9A\u4E49\u7684 "),d={href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/-coroutine-context/",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"CoroutineContext",-1),b=s(" \u7C7B\u578B\u7684\u503C\u8868\u793A\u7684\u67D0\u4E9B\u4E0A\u4E0B\u6587\u4E2D\u6267\u884C"),m=e('<p>\u534F\u7A0B\u4E0A\u4E0B\u6587\u662F\u4E00\u7CFB\u5217\u7684\u5143\u7D20 \u4E3B\u8981\u5305\u542B <code>job</code> \u548C \u5B83\u7684<code>dispatcher</code></p><h2 id="\u5206\u6D3E\u5668\u4E0E\u7EBF\u7A0B" tabindex="-1"><a class="header-anchor" href="#\u5206\u6D3E\u5668\u4E0E\u7EBF\u7A0B" aria-hidden="true">#</a> \u5206\u6D3E\u5668\u4E0E\u7EBF\u7A0B</h2><p>\u534F\u7A0B\u4E0A\u4E0B\u6587\u5305\u542B\u4E86\u4E00\u4E2A\u534F\u7A0B\u5206\u6D3E\u5668(coroutine dispatcher) \u5B83\u6307\u660E\u4E86\u5BF9\u5E94\u7684\u534F\u7A0B\u5728\u54EA\u4E2A\u6216\u54EA\u4E9B\u7EBF\u7A0B\u4E0A\u6267\u884C \u53EF\u4EE5\u9650\u5236\u534F\u7A0B\u6267\u884C\u5728</p><ul><li>\u7279\u5B9A\u7EBF\u7A0B</li><li>\u7EBF\u7A0B\u6C60</li><li>\u4E0D\u53D7\u9650\u5236</li></ul><p>\u8FD0\u884C</p>',5),g=s("\u6240\u6709\u534F\u7A0B\u6784\u5EFA\u5668(builder) \u5982"),f={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"launch",-1),x=s("\u548C"),v={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"async",-1),w=s(" \u63A5\u6536\u4E00\u4E2A\u53EF\u9009\u7684 "),y={href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/-coroutine-context/",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"CoroutineContext",-1),C=s(" \u53C2\u6570 \u53EF\u4EE5\u7528\u6765\u6307\u5B9A\u65B0\u534F\u7A0B\u7684\u5206\u6D3E\u5668\u548C\u5176\u4ED6\u4E0A\u4E0B\u6587\u5143\u7D20"),I=e(`<p>\u5982\u4E0B\u4F8B</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    launch <span class="token punctuation">{</span> <span class="token comment">// context of the parent, main runBlocking coroutine</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main runBlocking      : I&#39;m working in thread </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    launch <span class="token punctuation">{</span> <span class="token comment">// context of the parent, main runBlocking coroutine</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main runBlocking      : I&#39;m working in thread </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Unconfined<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// not confined -- will work with main thread</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Unconfined            : I&#39;m working in thread </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Unconfined<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// not confined -- will work with main thread</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Unconfined            : I&#39;m working in thread </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// will get dispatched to DefaultDispatcher </span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Default               : I&#39;m working in thread </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">launch</span><span class="token punctuation">(</span><span class="token function">newSingleThreadContext</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;MyOwnThread&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// will get its own new thread</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;newSingleThreadContext: I&#39;m working in thread </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>\u7ED3\u679C\u53EF\u80FD\u5982\u6B64</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Unconfined            : I&#39;m working in thread main @coroutine#3
Default               : I&#39;m working in thread DefaultDispatcher-worker-1 @coroutine#4
main runBlocking      : I&#39;m working in thread main @coroutine#2
newSingleThreadContext: I&#39;m working in thread MyOwnThread @coroutine#5
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u5F53 <code>launch{...}</code> \u6CA1\u6709\u6307\u5B9A\u53C2\u6570\u65F6 \u7EE7\u627F\u8C03\u7528\u5904\u7684\u4E0A\u4E0B\u6587</p><p>\u5728\u4E0A\u4F8B\u4E2D \u7EE7\u627F<code>runBlocking</code>\u534F\u7A0B\u7684\u4E0A\u4E0B\u6587</p>`,6),j={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-unconfined.html",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"Dispatchers.Unconfined",-1),$=s(" \u662F\u4E00\u4E2A\u6267\u884C\u5728\u4E3B\u7EBF\u7A0B\u7684\u7279\u6B8A\u7684\u5206\u6D3E\u5668"),L=s("\u5F53\u6CA1\u6709\u663E\u5F0F\u6307\u5B9A\u57DF\u4E2D\u5206\u6D3E\u5668\u65F6 \u4F7F\u7528\u9ED8\u8BA4\u5206\u6D3E\u5668("),S={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"Dispatchers.Default",-1),U=s(" \u4F7F\u7528\u5171\u4EAB\u7EBF\u7A0B\u6C60)"),J={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-single-thread-context.html",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"newSingleThreadContext",-1),N=s(" \u521B\u5EFA\u4E00\u4E2A\u7528\u4E8E\u534F\u7A0B\u6267\u884C\u7684\u65B0\u7EBF\u7A0B"),E=n("h2",{id:"\u672A\u6307\u5B9A\u7684\u5206\u6D3E\u5668",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u672A\u6307\u5B9A\u7684\u5206\u6D3E\u5668","aria-hidden":"true"},"#"),s(" \u672A\u6307\u5B9A\u7684\u5206\u6D3E\u5668")],-1),P={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-unconfined.html",target:"_blank",rel:"noopener noreferrer"},M=n("code",null,"Dispatchers.Unconfined",-1),F=s(" \u534F\u7A0B\u5206\u6D3E\u5668\u5728"),V=n("strong",null,"\u8C03\u7528\u7EBF\u7A0B",-1),O=s("\u5F00\u59CB\u6267\u884C\u534F\u7A0B \u76F4\u5230\u7B2C\u4E00\u4E2A\u6302\u8D77\u70B9(suspend \u51FD\u6570) \u534F\u7A0B\u6062\u590D\u65F6\u6240\u5728\u7684\u7EBF\u7A0B\u5B8C\u5168\u7531\u8C03\u7528\u7684\u6302\u8D77\u51FD\u6570\u786E\u5B9A"),W=e(`<p>\u672A\u6307\u5B9A\u7684\u5206\u6D3E\u5668\u9002\u7528\u4E8E \u6D88\u8017CPU\u65F6\u95F4 \u540C\u65F6\u66F4\u65B0\u6307\u5B9A\u7EBF\u7A0B\u7684\u5171\u4EAB\u6570\u636E\u7684\u534F\u7A0B \u4F7F\u7528</p><p>\u53E6\u4E00\u65B9\u9762 \u5206\u6D3E\u5668\u9ED8\u8BA4\u4ECE\u5916\u90E8\u534F\u7A0B\u57DF\u7EE7\u627F</p><p>\u7279\u522B\u662F <code>runBlocking</code> \u534F\u7A0B\u7684\u9ED8\u8BA4\u8C03\u5EA6\u7A0B\u5E8F\u4EC5\u9650\u4E8E\u8C03\u7528\u7EBF\u7A0B\uFF0C\u56E0\u6B64\u7EE7\u627F\u5B83\u5177\u6709\u5C06\u6267\u884C\u9650\u5236\u5728\u5177\u6709\u53EF\u9884\u6D4B FIFO \u8C03\u5EA6\u7684\u8BE5\u7EBF\u7A0B\u7684\u6548\u679C</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// not confined -- will work with main thread</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Unconfined      : I&#39;m working in thread </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Unconfined      : After delay in thread </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
launch <span class="token punctuation">{</span> <span class="token comment">// context of the parent, main runBlocking coroutine</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main runBlocking: I&#39;m working in thread </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main runBlocking: After delay in thread </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>\u6267\u884C\u7ED3\u679C</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Unconfined      : I&#39;m working in thread main
main runBlocking: I&#39;m working in thread main
Unconfined      : After delay in thread kotlinx.coroutines.DefaultExecutor
main runBlocking: After delay in thread main
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u6240\u4EE5\u7EE7\u627F<code>runBlocking</code>\u4E0A\u4E0B\u6587\u7684\u534F\u7A0B\u5728\u4E3B\u7EBF\u7A0B\u6267\u884C \u800C\u672A\u6307\u5B9A\u7684\u534F\u7A0B\u5728<code>delay</code>\u51FD\u6570\u6240\u7528\u7684<code>default executor</code>\u7EBF\u7A0B\u6062\u590D</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>\u672A\u6307\u5B9A\u5206\u6D3E\u5668\u662F\u4E00\u79CD\u5728\u4E00\u4E9B\u8FB9\u754C\u60C5\u51B5\u6709\u7528\u7684\u9AD8\u7EA7\u673A\u5236 The unconfined dispatcher is an advanced mechanism that can be helpful in certain corner cases where dispatching of a coroutine for its execution later is not needed or produces undesirable side-effects, because some operation in a coroutine must be performed right away.</p><p>\u5728\u4E00\u822C\u4EE3\u7801\u4E2D\u5E76\u4E0D\u9700\u8981</p></div><h2 id="\u4E0A\u4E0B\u6587\u4E2D\u7684-job" tabindex="-1"><a class="header-anchor" href="#\u4E0A\u4E0B\u6587\u4E2D\u7684-job" aria-hidden="true">#</a> \u4E0A\u4E0B\u6587\u4E2D\u7684 Job</h2><p>\u534F\u7A0B\u7684<code>Job</code>\u662F\u5B83\u4E0A\u4E0B\u6587\u7684\u4E00\u90E8\u5206 \u53EF\u4EE5\u901A\u8FC7<code>coroutineContext[Job]</code>\u8868\u8FBE\u5F0F\u83B7\u53D6</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;My job is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">coroutineContext<span class="token punctuation">[</span>Job<span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">isActive</p><p>CoroutineScope\u7684<code>isActive</code> \u662F <code>coroutineContext[Job]?.isActive == true</code> \u7684\u7B80\u5199</p></div><h2 id="\u5B50\u534F\u7A0B" tabindex="-1"><a class="header-anchor" href="#\u5B50\u534F\u7A0B" aria-hidden="true">#</a> \u5B50\u534F\u7A0B</h2>`,13),z=s("\u5F53\u4E00\u4E2A\u534F\u7A0B\u5728\u53E6\u4E00\u4E2A\u534F\u7A0B\u7684\u534F\u7A0B\u57DF\u542F\u52A8\u65F6(launch) \u5B83\u4F1A\u4ECE "),G={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/coroutine-context.html",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"CoroutineScope.coroutineContext",-1),K=s("\u7EE7\u627F\u81EA\u5DF1\u7684\u4E0A\u4E0B\u6587 \u540C\u65F6\u65B0\u534F\u7A0B\u7684"),Q={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"Job",-1),X=s("\u662F\u7236\u534F\u7A0B"),Y=n("code",null,"job",-1),Z=s("\u7684\u513F\u5B50"),nn=e(`<p>\u5F53\u7236\u534F\u7A0B\u53D6\u6D88\u7684\u65F6\u5019 \u5B83\u7684\u6240\u6709\u5B50\u534F\u7A0B\u4E5F\u4F1A\u9012\u5F52\u53D6\u6D88</p><p>\u7136\u800C\u6709\u4E24\u79CD\u65B9\u6CD5\u53EF\u4EE5\u663E\u5F0F\u91CD\u8F7D\u7236\u5B50\u5173\u7CFB</p><ul><li>\u5F53\u4F7F\u7528\u4E00\u4E2A\u4E0D\u540C\u7684\u534F\u7A0B\u57DF\u542F\u52A8\u534F\u7A0B\u65F6(<code>GlobalScope.launch</code>) \u65B0\u534F\u7A0B\u4E0D\u4F1A\u4ECE\u7236\u534F\u7A0B\u57DF\u7EE7\u627F<code>Job</code></li><li>\u5F53\u534F\u7A0B\u542F\u52A8\u65F6 \u4F20\u9012\u4E00\u4E2A\u4E0D\u540C\u7684<code>Job</code>\u5BF9\u8C61 \u5B83\u4F1A\u8986\u76D6\u7236\u57DF\u7684<code>Job</code></li></ul><p>\u8FD9\u4E24\u79CD\u60C5\u51B5 \u65B0\u534F\u7A0B\u90FD\u4E0D\u4F1A\u5173\u8054\u5230\u5B83\u542F\u52A8\u7684\u57DF \u540C\u65F6\u53EF\u4EE5\u72EC\u7ACB\u64CD\u4F5C</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token comment">// launch a coroutine to process some kind of incoming request</span>
<span class="token keyword">val</span> request <span class="token operator">=</span> launch <span class="token punctuation">{</span>
    <span class="token comment">// it spawns two other jobs</span>
    <span class="token function">launch</span><span class="token punctuation">(</span><span class="token function">Job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;job1: I run in my own Job and execute independently!&quot;</span></span><span class="token punctuation">)</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;job1: I am not affected by cancellation of the request&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// and the other inherits the parent context</span>
    launch <span class="token punctuation">{</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;job2: I am a child of the request coroutine&quot;</span></span><span class="token punctuation">)</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;job2: I will not execute this line if my parent request is cancelled&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>
request<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// cancel processing of the request</span>
<span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// delay a second to see what happens</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main: Who has survived request cancellation?&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>\u53EF\u80FD\u7684\u8FD0\u884C\u7ED3\u679C</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>job1: I run in my own Job and execute independently!
job2: I am a child of the request coroutine
job1: I am not affected by cancellation of the request
main: Who has survived request cancellation?
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="parental-responsibilities" tabindex="-1"><a class="header-anchor" href="#parental-responsibilities" aria-hidden="true">#</a> Parental responsibilities</h2><p>\u7236\u534F\u7A0B\u4F1A\u4E00\u76F4\u7B49\u5F85\u6240\u6709\u5B50\u534F\u7A0B\u7684\u5B8C\u6210(\u4E0D\u9700\u8981\u8BB0\u5F55\u542F\u52A8\u7684\u5B50\u534F\u7A0B \u4E5F\u4E0D\u9700\u8981\u9010\u4E00join\u5B50\u534F\u7A0B)</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token comment">// launch a coroutine to process some kind of incoming request</span>
<span class="token keyword">val</span> request <span class="token operator">=</span> launch <span class="token punctuation">{</span>
    <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token operator">-&gt;</span> <span class="token comment">// launch a few children jobs</span>
        launch  <span class="token punctuation">{</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200L</span><span class="token punctuation">)</span> <span class="token comment">// variable delay 200ms, 400ms, 600ms</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Coroutine </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string"> is done&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;request: I&#39;m done and I don&#39;t explicitly join my children that are still active&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
request<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// wait for completion of the request, including all its children</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Now processing of the request is complete&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>\u8FD0\u884C\u7ED3\u679C</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>request: I&#39;m done and I don&#39;t explicitly join my children that are still active
Coroutine 0 is done
Coroutine 1 is done
Coroutine 2 is done
Now processing of the request is complete
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="\u7ED3\u5408\u4E0A\u4E0B\u6587\u5143\u7D20" tabindex="-1"><a class="header-anchor" href="#\u7ED3\u5408\u4E0A\u4E0B\u6587\u5143\u7D20" aria-hidden="true">#</a> \u7ED3\u5408\u4E0A\u4E0B\u6587\u5143\u7D20</h2><p>\u53EF\u4EE5\u7528<code>+</code>\u8FDE\u63A5\u5B9A\u4E49\u7684\u591A\u4E2A\u4E0A\u4E0B\u6587\u5143\u7D20</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default <span class="token operator">+</span> <span class="token function">CoroutineName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;test&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;I&#39;m working in thread </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><details class="custom-container details"><summary>CoroutineName</summary><p><code>CoroutineName</code> \u53EF\u4EE5\u7528\u4E8E\u534F\u7A0B\u547D\u540D \u8C03\u8BD5\u7684\u65F6\u5019\u5F88\u597D\u7528</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Started main coroutine&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// run two background value computations</span>
<span class="token keyword">val</span> v1 <span class="token operator">=</span> <span class="token function">async</span><span class="token punctuation">(</span><span class="token function">CoroutineName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;v1coroutine&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Computing v1&quot;</span></span><span class="token punctuation">)</span>
    <span class="token number">252</span>
<span class="token punctuation">}</span>
<span class="token keyword">val</span> v2 <span class="token operator">=</span> <span class="token function">async</span><span class="token punctuation">(</span><span class="token function">CoroutineName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;v2coroutine&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Computing v2&quot;</span></span><span class="token punctuation">)</span>
    <span class="token number">6</span>
<span class="token punctuation">}</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;The answer for v1 / v2 = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">v1<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> v2<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>\u5B9A\u4E49 <code>-Dkotlinx.coroutines.debug</code> \u540E\u7684\u7ED3\u679C</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[main @main#1] Started main coroutine
[main @v1coroutine#2] Computing v1
[main @v2coroutine#3] Computing v2
[main @main#1] The answer for v1 / v2 = 42
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></details><h2 id="\u534F\u7A0B\u57DF" tabindex="-1"><a class="header-anchor" href="#\u534F\u7A0B\u57DF" aria-hidden="true">#</a> \u534F\u7A0B\u57DF</h2><p>\u5BF9\u4E8E\u6709\u751F\u547D\u5468\u671F(lifecycle)\u7684\u975E\u534F\u7A0B\u5BF9\u8C61 \u534F\u7A0B\u5FC5\u987B\u5728\u751F\u547D\u5468\u671F\u7ED3\u675F\u65F6\u53D6\u6D88\u624D\u80FD\u907F\u514D\u5185\u5B58\u6CC4\u6F0F</p>`,18),sn=n("code",null,"kotlinx.coroutines",-1),an=s(" \u63D0\u4F9B\u4E86\u4E00\u4E2A\u62BD\u8C61\u5C01\u88C5 "),tn={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html",target:"_blank",rel:"noopener noreferrer"},en=n("code",null,"CoroutineScope",-1),on=n("p",null,[s("\u6211\u4EEC\u901A\u8FC7\u521B\u5EFA"),n("code",null,"CoroutineScope"),s("\u5B9E\u4F8B\u6765\u7BA1\u7406\u534F\u7A0B\u7684\u751F\u547D\u5468\u671F")],-1),pn=s("\u4E00\u4E2A"),cn=n("code",null,"CoroutineScope",-1),ln=s("\u5B9E\u4F8B\u53EF\u4EE5\u901A\u8FC7 "),un={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope.html",target:"_blank",rel:"noopener noreferrer"},rn=n("code",null,"CoroutineScope()",-1),kn=s("\u6216\u8005"),dn={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-main-scope.html",target:"_blank",rel:"noopener noreferrer"},hn=n("code",null,"MainScope",-1),bn=s("\u5DE5\u5382\u51FD\u6570\u6765\u521B\u5EFA"),mn=e(`<p>\u524D\u8005\u521B\u5EFA\u4E00\u4E2A\u901A\u7528\u534F\u7A0B\u57DF \u540E\u8005\u521B\u5EFA\u4E00\u4E2A\u7528\u4E8EUI\u5E94\u7528\u7684\u57DF \u5E76\u4E14\u4F7F\u7528<code>Dispatcher.Main</code>\u4F5C\u4E3A\u9ED8\u8BA4\u5206\u6D3E\u5668</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">class</span> Activity <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> mainScope <span class="token operator">=</span> <span class="token function">MainScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">fun</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mainScope<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// to be continued ...</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="\u7EBF\u7A0B\u5C40\u90E8\u6570\u636E" tabindex="-1"><a class="header-anchor" href="#\u7EBF\u7A0B\u5C40\u90E8\u6570\u636E" aria-hidden="true">#</a> \u7EBF\u7A0B\u5C40\u90E8\u6570\u636E</h3><p>Thread-local data</p><p>\u6709\u65F6\u5019\u9700\u8981\u5728\u534F\u7A0B\u95F4\u5229\u7528\u7EBF\u7A0B\u5C40\u90E8\u6570\u636E \u4F46\u534F\u7A0B\u5E76\u4E0D\u7ED1\u5B9A\u5728\u7279\u5B9A\u7EBF\u7A0B\u4E0A \u6240\u4EE5\u624B\u52A8\u64CD\u4F5C\u4F1A\u51FA\u95EE\u9898</p>`,5),gn=s("\u5BF9\u4E8E "),fn={href:"https://docs.oracle.com/javase/8/docs/api/java/lang/ThreadLocal.html",target:"_blank",rel:"noopener noreferrer"},_n=n("code",null,"ThreadLocal",-1),xn=s(),vn={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/as-context-element.html",target:"_blank",rel:"noopener noreferrer"},qn=n("code",null,"asContextElement",-1),wn=s("\u62D3\u5C55\u51FD\u6570\u80FD\u89E3\u51B3\u8FD9\u4E2A\u95EE\u9898 \u5B83\u4F1A\u521B\u5EFA\u4E00\u4E2A\u989D\u5916\u7684\u80FD\u5B58\u6307\u5B9A\u7684"),yn=n("code",null,"ThreadLocal",-1),Tn=s("\u5E76\u4E14\u80FD\u591F\u6BCF\u6B21\u534F\u7A0B\u4E0A\u4E0B\u6587\u5207\u6362\u65F6\u90FD\u80FD\u6062\u590D\u7684\u4E0A\u4E0B\u6587\u5143\u7D20(context element)"),Cn=e(`<div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">val</span> threadLocal <span class="token operator">=</span> ThreadLocal<span class="token operator">&lt;</span>String<span class="token operator">?</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// declare thread-local variable</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Pre-main, current thread: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, thread local value: &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> job <span class="token operator">=</span> <span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default <span class="token operator">+</span> threadLocal<span class="token punctuation">.</span><span class="token function">asContextElement</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;launch&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Launch start, current thread: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, thread local value: &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;&quot;</span></span><span class="token punctuation">)</span>
        <span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;After yield, current thread: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, thread local value: &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    job<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Post-main, current thread: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, thread local value: &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;&quot;</span></span><span class="token punctuation">)</span>    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>\u793A\u4F8B\u4E2D\u6211\u4EEC\u5229\u7528\u540E\u53F0\u7EBF\u7A0B\u6C60(<code>Dispatchers.Default</code>)\u542F\u52A8\u65B0\u534F\u7A0B \u6240\u4EE5\u5B83\u5728\u4E00\u4E2A\u4E0D\u540C\u7684\u7EBF\u7A0B\u4E0A\u6267\u884C \u540C\u65F6\u5B83\u62E5\u6709\u6307\u5B9A\u7684\u7EBF\u7A0B\u5C40\u90E8\u53D8\u91CF<code>threadLocal.asContextElement(value = &quot;launch&quot;)</code> \u8FD9\u4E2A\u4E0E\u6240\u5728\u7684\u7EBF\u7A0B\u65E0\u5173</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Pre-main, current thread: Thread[main @coroutine#1,5,main], thread local value: &#39;main&#39;
Launch start, current thread: Thread[DefaultDispatcher-worker-1 @coroutine#2,5,main], thread local value: &#39;launch&#39;
After yield, current thread: Thread[DefaultDispatcher-worker-2 @coroutine#2,5,main], thread local value: &#39;launch&#39;
Post-main, current thread: Thread[main @coroutine#1,5,main], thread local value: &#39;main&#39;
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p>\u5F88\u5BB9\u6613\u5FD8\u8BB0\u6307\u5B9A\u76F8\u5173\u7684\u4E0A\u4E0B\u6587\u5143\u7D20</p></blockquote><p>\u5982\u679C\u6267\u884C\u534F\u7A0B\u7684\u7EBF\u7A0B\u4E0D\u540C \u4F1A\u4ECE\u7EBF\u7A0B\u5C40\u90E8\u53D8\u91CF\u83B7\u53D6\u5230\u610F\u6599\u4E4B\u5916\u7684\u503C</p><p>\u63A8\u8350\u4F7F\u7528\u4F1A\u5728\u9519\u8BEF\u4F7F\u7528\u65F6\u5F88\u5FEB\u51FA\u9519\u7684<code>ensurePresent</code>\u65B9\u6CD5\u6765\u907F\u514D\u4E0A\u8FF0\u95EE\u9898</p><p>ThreadLocal has first-class support and can be used with any primitive kotlinx.coroutines provides. It has one key limitation, though: when a thread-local is mutated, a new value is not propagated to the coroutine caller (because a context element cannot track all ThreadLocal object accesses), and the updated value is lost on the next suspension. Use withContext to update the value of the thread-local in a coroutine, see asContextElement for more details.</p><p>Alternatively, a value can be stored in a mutable box like class Counter(var i: Int), which is, in turn, stored in a thread-local variable. However, in this case you are fully responsible to synchronize potentially concurrent modifications to the variable in this mutable box.</p><p>For advanced usage, for example for integration with logging MDC, transactional contexts or any other libraries which internally use thread-locals for passing data, see the documentation of the ThreadContextElement interface that should be implemented.</p>`,9);function In(jn,Dn){const a=o("ExternalLinkIcon");return p(),c(i,null,[r,n("p",null,[k,n("a",d,[h,t(a)]),b]),m,n("p",null,[g,n("a",f,[_,t(a)]),x,n("a",v,[q,t(a)]),w,n("a",y,[T,t(a)]),C]),I,n("p",null,[n("a",j,[D,t(a)]),$]),n("p",null,[L,n("a",S,[B,t(a)]),U]),n("p",null,[n("a",J,[A,t(a)]),N]),E,n("p",null,[n("a",P,[M,t(a)]),F,V,O]),W,n("p",null,[z,n("a",G,[H,t(a)]),K,n("a",Q,[R,t(a)]),X,Y,Z]),nn,n("p",null,[sn,an,n("a",tn,[en,t(a)])]),on,n("p",null,[pn,cn,ln,n("a",un,[rn,t(a)]),kn,n("a",dn,[hn,t(a)]),bn]),mn,n("p",null,[gn,n("a",fn,[_n,t(a)]),xn,n("a",vn,[qn,t(a)]),wn,yn,Tn]),Cn],64)}var Sn=l(u,[["render",In]]);export{Sn as default};
