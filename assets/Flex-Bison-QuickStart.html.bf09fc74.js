import{r as t,o,c,a as n,b as p,F as l,d as s,e}from"./app.7d274c27.js";import{_ as r}from"./plugin-vue_export-helper.21dcd24c.js";const u={},i=n("h1",{id:"flex-bison-\u5C0F-\u5B66-\u4E60",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#flex-bison-\u5C0F-\u5B66-\u4E60","aria-hidden":"true"},"#"),s(" Flex/Bison \u5C0F \u5B66 \u4E60")],-1),k={class:"custom-container tip"},b=n("p",{class:"custom-container-title"},"lex/flex yacc/bison",-1),m={href:"https://stackoverflow.com/questions/623503/what-is-the-difference-between-flex-lex-and-yacc-bison",target:"_blank",rel:"noopener noreferrer"},d=s("lex/flex yacc/bison"),h=e(`<p>lex \u548C flex(the fast lexical analyser generator) \u53EF\u4EE5\u8BA4\u4E3A\u6CA1\u4EC0\u4E48\u533A\u522B \u5982\u679C\u7B49\u4F60\u7528\u5230\u4E86\u6709\u533A\u522B\u7684\u5730\u65B9\u65F6 \u4F60\u5C31\u77E5\u9053\u6709\u4EC0\u4E48\u533A\u522B\u4E86</p><p>Bison \u662F GNU \u7684 Yacc \u5B9E\u73B0/\u62D3\u5C55 Flex \u662F Lex \u7684\u7EE7\u627F\u8005</p><p>\u66F4\u63A8\u8350\u7528 Flex/Bison \u66FF\u4EE3 Lex/Yacc</p><blockquote><p>byacc \u662F Berkeley \u7684 Yacc \u5B9E\u73B0</p></blockquote><blockquote><p>ubuntu20.04:<code>lrwxrwxrwx 1 root root 4 8\u6708 7 2018 /usr/bin/lex -&gt; flex</code></p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>yacc -V
bison <span class="token punctuation">(</span>GNU Bison<span class="token punctuation">)</span> <span class="token number">3.5</span>.1
Written by Robert Corbett and Richard Stallman.
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,6),g=e(`<h2 id="flex" tabindex="-1"><a class="header-anchor" href="#flex" aria-hidden="true">#</a> Flex</h2><p>\u6587\u4EF6\u540E\u7F00\u4E3A <code>l</code> VSCode\u7684\u63D2\u4EF6:<strong>Yash</strong></p><p>\u6587\u4EF6\u7ED3\u6784</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token operator">%</span><span class="token punctuation">{</span>
  <span class="token comment">// \u5B9A\u4E49\u6BB5</span>
  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token operator">%</span><span class="token punctuation">}</span>
<span class="token comment">/* \u53EF\u4EE5\u5B9A\u4E49\u53D8\u91CF */</span>
ALPHA <span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span>Z<span class="token punctuation">]</span>

<span class="token comment">/* \u7528\u4E24\u4E2A % \u5206\u5272\u6BB5 \u4E0B\u4E00\u4E2A\u6BB5\u4E3A\u89C4\u5219\u6BB5 \u6307\u5B9A\u89C4\u5219\u548C\u884C\u4E3A */</span>
<span class="token operator">%</span><span class="token operator">%</span>
<span class="token punctuation">{</span>ALPHA<span class="token punctuation">}</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;\u5339\u914D\u5230\u5B57\u6BCD&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;\u5339\u914D\u5230\u6570\u5B57\u4E32&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token operator">%</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Lexer Begin\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">yylex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u6267\u884C\u5230\u7ED3\u675F\u6216\u8005 return</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Lexer End\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><div class="custom-container danger"><p class="custom-container-title">\u89C4\u5219\u7684\u5339\u914D</p><p>\u89C4\u5219\u7684\u683C\u5F0F</p><div class="language-lex ext-lex line-numbers-mode"><pre class="language-lex"><code>REGEX {/*code block*/}
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Lex/Flex \u5339\u914D\u89C4\u5219</p><ol><li>\u8D2A\u5A6A\u6A21\u5F0F</li><li>\u591A\u4E2A\u5339\u914D\u9879\u9009\u62E9\u6700\u65E9\u7684\u6A21\u5F0F(\u66F4\u65E9\u5B9A\u4E49\u7684)</li></ol></div><p>flex \u7F16\u8BD1</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>flex demo.l <span class="token comment"># \u9ED8\u8BA4\u751F\u6210\u6587\u4EF6\u540D\u4E3A lex.yy.c</span>
flex -t demo.l <span class="token operator">&gt;</span> demo.lex.c <span class="token comment"># \u751F\u6210\u6587\u4EF6\u540D\u4E3A demo.lex.c</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="bison" tabindex="-1"><a class="header-anchor" href="#bison" aria-hidden="true">#</a> Bison</h2><p>flex\u53EF\u4EE5\u5355\u72EC\u4F7F\u7528 \u4F46bison\u4E0D\u884C bison\u901A\u8FC7<code>yylex()</code>\u83B7\u53D6\u8F93\u5165</p><p>bison\u7684\u4E09\u4E2A\u90E8\u5206\u548Cflex\u76F8\u540C</p><p>\u4E0B\u9762\u662F\u7B80\u5355\u7684\u56DB\u5219\u8FD0\u7B97\u4EE3\u7801</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token operator">%</span><span class="token punctuation">{</span>
  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span>
  <span class="token keyword">void</span> <span class="token function">yyerror</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token punctuation">}</span>
<span class="token operator">%</span><span class="token keyword">union</span><span class="token punctuation">{</span>
  <span class="token keyword">double</span> value<span class="token punctuation">;</span>
  <span class="token keyword">char</span> ch<span class="token punctuation">;</span>
  <span class="token comment">/* \u5B9A\u4E49\u8282\u70B9\u7C7B\u578B  */</span>
<span class="token punctuation">}</span>

<span class="token operator">%</span>token<span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> NUM <span class="token comment">/* \u5B9A\u4E49\u7EC8\u7ED3\u7B26\u7C7B\u578B */</span>
<span class="token operator">%</span>token EOL ADD SUB DIV MUL <span class="token comment">/* \u975E\u5B9A\u4E49\u7C7B\u578B\u5219\u9ED8\u8BA4\u4E3Aint \u65E0\u6CD5\u83B7\u53D6\u5230\u503C */</span>

<span class="token operator">%</span>type<span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> term
<span class="token operator">%</span><span class="token operator">%</span>
cal_list <span class="token operator">:</span> cal EOL cal_list <span class="token punctuation">{</span><span class="token comment">/* \u8868\u8FBE\u5F0F\u540E\u7684\u7B26\u53F7 $$\u8868\u793Acal_list $1-$n\u4F9D\u6B21\u8868\u793Acal EOL cal_list  */</span><span class="token punctuation">}</span>
  <span class="token operator">|</span> <span class="token comment">/*cal_list -&gt; cal EOL cal_list | empty*/</span>
  <span class="token punctuation">;</span> <span class="token comment">/* \u5206\u53F7\u4F5C\u4E3A\u4EA7\u751F\u5F0F\u7684\u7ED3\u675F\u7B26\u53F7  */</span>
cal <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">/* \u7A7A\u5339\u914D \u76F8\u5F53\u4E8Eempty\u6216\u8005\\epsilon */</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;&gt; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>
  <span class="token operator">|</span> term ADD term<span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;= %lf\\n&gt; &quot;</span><span class="token punctuation">,</span>$<span class="token number">1</span><span class="token operator">+</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token operator">|</span> term SUB term<span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;= %lf\\n&gt; &quot;</span><span class="token punctuation">,</span>$<span class="token number">1</span><span class="token operator">-</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token operator">|</span> term<span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;= %lf\\n&gt; &quot;</span><span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">;</span>
term<span class="token operator">:</span> NUM MUL NUM <span class="token punctuation">{</span> $$ <span class="token operator">=</span> $<span class="token number">1</span> <span class="token operator">*</span> $<span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token operator">|</span> NUM DIV NUM <span class="token punctuation">{</span> $$ <span class="token operator">=</span> $<span class="token number">1</span> <span class="token operator">/</span> $<span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token operator">|</span> NUM <span class="token punctuation">{</span> $$<span class="token operator">=</span>$<span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token operator">%</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;&gt; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">yyparse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">yyerror</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span>msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><blockquote><p>bison \u9700\u8981\u5B9A\u4E49<code>yyerror</code>\u51FD\u6570</p></blockquote><p>bison \u7F16\u8BD1</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>bison -d cal.y
<span class="token comment"># \u9ED8\u8BA4\u751F\u6210 cal.tab.h cal.tab.c</span>
<span class="token comment"># cal.tab.h \u91CC\u9762\u5B9A\u4E49\u4E86\u7EC8\u7ED3\u7B26\uFF08enum\uFF09</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="cal" tabindex="-1"><a class="header-anchor" href="#cal" aria-hidden="true">#</a> cal</h2><p>\u4E0B\u9762\u5C55\u793A\u4E00\u4E2Aflex\u548Cbison\u8054\u5408\u4F7F\u7528\u7684\u4F8B\u5B50</p><p>bison\u4EE3\u7801\u540C\u4E0A</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token operator">%</span><span class="token punctuation">{</span>
  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&quot;y.tab.h&quot;</span></span>
  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h&gt;</span></span>
<span class="token operator">%</span><span class="token punctuation">}</span>

<span class="token operator">%</span>option noyywrap
NUMS <span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span>
<span class="token operator">%</span><span class="token operator">%</span>
<span class="token punctuation">{</span>NUMS<span class="token punctuation">}</span>  <span class="token punctuation">{</span>yylval<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>yytext<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> NUM<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token string">&quot;-&quot;</span>     <span class="token punctuation">{</span><span class="token keyword">return</span> SUB<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token string">&quot;+&quot;</span>     <span class="token punctuation">{</span><span class="token keyword">return</span> ADD<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token string">&quot;*&quot;</span>     <span class="token punctuation">{</span><span class="token keyword">return</span> MUL<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token string">&quot;/&quot;</span>     <span class="token punctuation">{</span><span class="token keyword">return</span> DIV<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token string">&quot;\\n&quot;</span>    <span class="token punctuation">{</span><span class="token keyword">return</span> EOL<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token operator">%</span><span class="token operator">%</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><blockquote><p>\u901A\u8FC7<code>yylval</code>\u6765\u8BBE\u7F6E\u7EC8\u7ED3\u7B26\u7684\u503C \u503C\u7C7B\u578B\u548C\u540D\u5728bison\u7684<code>%union</code>\u8054\u5408\u4F53\u4E2D\u5B9A\u4E49</p></blockquote><p>Makefile\u7F16\u8BD1</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># yacc/bison flags</span>
<span class="token assign-left variable">YFLAGS</span><span class="token operator">=</span>-d
cal: lex.c
lex.c: cal.l
	lex -t $<span class="token operator">&lt;</span> <span class="token operator">&gt;</span> <span class="token variable">$@</span>
cal.c cal.h:cal.y

demo: demo.c
demo.c: demo.l

clean:
	-rm <span class="token function">cal</span>
	-rm lex.*
	-rm cal.tab.* cal.c y.tab.h
	-rm demo.c demo
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="\u53C2\u8003\u4E0E\u5B66\u4E60" tabindex="-1"><a class="header-anchor" href="#\u53C2\u8003\u4E0E\u5B66\u4E60" aria-hidden="true">#</a> \u53C2\u8003\u4E0E\u5B66\u4E60</h2>`,23),x={href:"http://dinosaur.compilertools.net/",target:"_blank",rel:"noopener noreferrer"},f=s("The Lex & Yacc Page");function y(v,q){const a=t("ExternalLinkIcon");return o(),c(l,null,[i,n("div",k,[b,n("p",null,[n("a",m,[d,p(a)])]),h]),g,n("ul",null,[n("li",null,[n("a",x,[f,p(a)])])])],64)}var $=r(u,[["render",y]]);export{$ as default};
