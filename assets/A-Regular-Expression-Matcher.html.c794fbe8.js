import{r as p,o as e,c as t,a as n,b as o,F as c,d as s,e as r}from"./app.7d274c27.js";import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";const u={},k=n("h1",{id:"\u4E00\u4E2A\u7B80\u5355\u7684\u6B63\u5219\u8868\u8FBE\u5F0F\u5339\u914D\u5B9E\u73B0",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u4E00\u4E2A\u7B80\u5355\u7684\u6B63\u5219\u8868\u8FBE\u5F0F\u5339\u914D\u5B9E\u73B0","aria-hidden":"true"},"#"),s(" \u4E00\u4E2A\u7B80\u5355\u7684\u6B63\u5219\u8868\u8FBE\u5F0F\u5339\u914D\u5B9E\u73B0")],-1),i={class:"custom-container tip"},m=n("p",{class:"custom-container-title"},"\u539F\u6587\u4FE1\u606F",-1),b=s("Code by Rob Pike Exegesis by Brian Kernighan Draft version Jan 28 2007 \u7F51\u5740:"),h={href:"https://www.cs.princeton.edu/courses/archive/spr09/cos333/beautiful.html",target:"_blank",rel:"noopener noreferrer"},d=s("https://www.cs.princeton.edu/courses/archive/spr09/cos333/beautiful.html"),x=r(`<h2 id="\u5F15\u8A00" tabindex="-1"><a class="header-anchor" href="#\u5F15\u8A00" aria-hidden="true">#</a> \u5F15\u8A00</h2><p>\u4F18\u7F8E\u7684\u4EE3\u7801\u5E94\u8BE5\u7B80\u5355\u2014\u2014\u6E05\u6670\u5E76\u6613\u4E8E\u7406\u89E3\u3002\u4F18\u7F8E\u7684\u4EE3\u7801\u5E94\u8BE5\u662F\u7D27\u51D1\u7684\u2014\u2014\u6070\u597D\u80FD\u5B9E\u73B0\u529F\u80FD\u4F46\u53C8\u4E0D\u795E\u79D8(cryptic)\u4EE5\u81F3\u4E8E\u4E0D\u80FD\u7406\u89E3\u3002\u4F18\u7F8E\u7684\u4EE3\u7801\u5F88\u53EF\u80FD\u662F\u901A\u7528\u7684\uFF0C\u4EE5\u7EDF\u4E00\u7684\u65B9\u5F0F\u89E3\u51B3\u4E00\u5927\u7C7B\u95EE\u9898\u3002\u4EBA\u4EEC\u751A\u81F3\u53EF\u4EE5\u5C06\u5176\u63CF\u8FF0\u4E3A\u4F18\u96C5\uFF0C\u663E\u793A\u51FA\u826F\u597D\u7684\u54C1\u5473\u548C\u7CBE\u81F4\u3002</p><p><s>\u540E\u9762\u5C31\u662F\u4E9B\u4ECB\u7ECD \u61D2\u5F97\u7FFB\u8BD1\u4E86</s></p><h2 id="\u7F16\u7A0B\u7EC3\u4E60" tabindex="-1"><a class="header-anchor" href="#\u7F16\u7A0B\u7EC3\u4E60" aria-hidden="true">#</a> \u7F16\u7A0B\u7EC3\u4E60</h2><p>Rob Pike \u548C Brian Kernighan \u57281998\u5E74\u6B63\u5728\u5199 <em>The Practice of Programming</em>(&quot;TPOP&quot;)</p><p>\u5904\u7406\u4EE5\u4E0B\u7ED3\u6784\u7684\u6B63\u5219\u8868\u8FBE\u5F0F(\u4E00\u4E2A\u5B50\u96C6)</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>c    matches any literal character c
.    matches any single character
^    matches the beginning of the input string
$    matches the end of the input string
*    matches zero or more occurrences of the previous character
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#\u5B9E\u73B0" aria-hidden="true">#</a> \u5B9E\u73B0</h2><p>\u5728\u4E66\u4E2D\uFF0C\u8FD9\u4E2A\u6B63\u5219\u8868\u8FBE\u5F0F\u5339\u914D\u662F\u6A21\u4EFF<code>grep</code>\u7684\u4E00\u90E8\u5206\u4EE3\u7801\uFF0C\u4F46\u8FD9\u90E8\u5206\u4EE3\u7801\u662F\u5B8C\u5168\u4E0E\u5176\u4ED6\u90E8\u5206\u72EC\u7ACB\u7684\u3002\u4E3B\u7A0B\u5E8F\u5728\u8FD9\u91CC\u5E76\u4E0D\u592A\u91CD\u8981\uFF0C\u5B83\u5C31\u50CF<code>grep</code>\u548C\u7C7B\u4F3C\u7684<code>*nix</code>\u5DE5\u5177\u4E00\u6837\uFF0C\u4ECE\u6807\u51C6\u8F93\u5165\u6216\u8005\u6587\u4EF6\u4E2D\u8BFB\u53D6\u5B57\u7B26\u6D41\uFF0C\u7136\u540E\u8F93\u51FA\u5339\u914D\u9879\u3002</p><p>\u8FD9\u5C31\u662F\u5339\u914D\u90E8\u5206\u7684\u4EE3\u7801\uFF1A</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/* match: search for regexp anywhere in text */</span>
<span class="token keyword">int</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>regexp<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>regexp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;^&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">matchhere</span><span class="token punctuation">(</span>regexp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">do</span> <span class="token punctuation">{</span> <span class="token comment">/* must look even if string is empty */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">matchhere</span><span class="token punctuation">(</span>regexp<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>text<span class="token operator">++</span> <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* matchhere: search for regexp at beginning of text */</span>
<span class="token keyword">int</span> <span class="token function">matchhere</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>regexp<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>regexp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>regexp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;*&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">matchstar</span><span class="token punctuation">(</span>regexp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> regexp <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>regexp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;$&#39;</span> <span class="token operator">&amp;&amp;</span> regexp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">*</span>text <span class="token operator">==</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>text <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>regexp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;.&#39;</span> <span class="token operator">||</span> regexp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">*</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">matchhere</span><span class="token punctuation">(</span>regexp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> text <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* matchstar: search for c*regexp at beginning of text */</span>
<span class="token keyword">int</span> <span class="token function">matchstar</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>regexp<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">do</span> <span class="token punctuation">{</span> <span class="token comment">/* a * matches zero or more instances */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">matchhere</span><span class="token punctuation">(</span>regexp<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>text <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>text<span class="token operator">++</span> <span class="token operator">==</span> c <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><blockquote><p>\u4EE3\u7801\u7ECF\u8FC7 Google \u98CE\u683C\u683C\u5F0F\u5316</p></blockquote>`,12);function g(f,w){const a=p("ExternalLinkIcon");return e(),t(c,null,[k,n("div",i,[m,n("p",null,[b,n("a",h,[d,o(a)])])]),x],64)}var v=l(u,[["render",g]]);export{v as default};
