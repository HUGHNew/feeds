import{r as e,o,c,a as n,b as p,F as l,d as s,e as t}from"./app.7d274c27.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";const r={},i=n("h1",{id:"c-\u5927-\u5B66-\u4E60",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#c-\u5927-\u5B66-\u4E60","aria-hidden":"true"},"#"),s(" C++ \u5927 \u5B66 \u4E60")],-1),k=s("\u66F4\u4E00\u4E9B\u6BD4\u8F83\u77ED\u5C0F\u6709\u610F\u4E49\u7684\u7684\u4E1C\u897F \u957F\u7BC7\u7684\u5185\u5BB9\u8F6C\u5230"),d={href:"https://blog.csdn.net/qq_46264758/category_11787298.html",target:"_blank",rel:"noopener noreferrer"},b=s("CSDN"),m=n("p",null,"CSDN:",-1),h={href:"https://blog.csdn.net/qq_46264758/article/details/125133088",target:"_blank",rel:"noopener noreferrer"},_=s("\u79FB\u52A8\u8BED\u4E49"),g={href:"https://blog.csdn.net/qq_46264758/article/details/125133006",target:"_blank",rel:"noopener noreferrer"},f=s("\u63A8\u5BFC"),y={id:"\u8FD4\u56DE\u503C\u4F18\u5316",tabindex:"-1"},v=n("a",{class:"header-anchor",href:"#\u8FD4\u56DE\u503C\u4F18\u5316","aria-hidden":"true"},"#",-1),w=s(),x={href:"https://mp.weixin.qq.com/s/LwnDtK6HNZo_StIxQ5yJhA",target:"_blank",rel:"noopener noreferrer"},q=s("\u8FD4\u56DE\u503C\u4F18\u5316"),I=t("<table><thead><tr><th>\u8FD4\u56DE\u503C\u4F18\u5316</th><th>RVO</th><th>NRVO</th></tr></thead><tbody><tr><td>\u5168\u79F0</td><td>Return Value Optimization</td><td>Named Return Value Optimization(\u5BF9\u4E8E\u5177\u540D<s>\u6CDB\u5DE6\u503C</s>\u5BF9\u8C61\u7684\u8FD4\u56DE\u4F18\u5316)</td></tr><tr><td>\u539F\u7406</td><td>\u8FD4\u56DE\u4E00\u4E2A\u7C7B\u5BF9\u8C61\u7684\u51FD\u6570\u7684\u8FD4\u56DE\u503C\u5F53\u505A\u8BE5\u51FD\u6570\u7684\u53C2\u6570(T&amp;)\u6765\u5904\u7406</td><td>\u5BF9\u4E8E\u5177\u540D\u53D8\u91CF\u7684\u589E\u5F3A</td></tr></tbody></table>",1),C={id:"\u521D\u59CB\u5316",tabindex:"-1"},z=n("a",{class:"header-anchor",href:"#\u521D\u59CB\u5316","aria-hidden":"true"},"#",-1),T=s(),S={href:"https://zh.cppreference.com/w/cpp/language/initialization",target:"_blank",rel:"noopener noreferrer"},E=s("\u521D\u59CB\u5316"),N=t(`<blockquote><p>\u6240\u6709\u5177\u6709\u9759\u6001\u5B58\u50A8\u671F\u7684\u975E\u5C40\u90E8\u53D8\u91CF\u7684\u521D\u59CB\u5316\u4F1A\u4F5C\u4E3A\u7A0B\u5E8F\u542F\u52A8\u7684\u4E00\u90E8\u5206\u5728 main \u51FD\u6570\u7684\u6267\u884C\u4E4B\u524D\u8FDB\u884C\uFF08\u9664\u975E\u88AB\u5EF6\u8FDF\uFF0C\u89C1\u4E0B\u6587\uFF09\u3002\u6240\u6709\u5177\u6709\u7EBF\u7A0B\u5C40\u90E8\u5B58\u50A8\u671F\u7684\u975E\u5C40\u90E8\u53D8\u91CF\u7684\u521D\u59CB\u5316\u4F1A\u4F5C\u4E3A\u7EBF\u7A0B\u542F\u52A8\u7684\u4E00\u90E8\u5206\u8FDB\u884C\uFF0C\u6309\u987A\u5E8F\u65E9\u4E8E\u7EBF\u7A0B\u51FD\u6570\u7684\u6267\u884C\u5F00\u59CB\u3002</p></blockquote><p>\u4E00\u6BB5\u80FD\u5728 <code>main</code> \u51FD\u6570\u4E4B\u524D\u6267\u884C\u7684\u4EE3\u7801</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Before Main&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Lambda&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;main&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="\u5EF6\u8FDF\u52A8\u6001\u521D\u59CB\u5316" tabindex="-1"><a class="header-anchor" href="#\u5EF6\u8FDF\u52A8\u6001\u521D\u59CB\u5316" aria-hidden="true">#</a> \u5EF6\u8FDF\u52A8\u6001\u521D\u59CB\u5316</h3><p>\u8FD8\u770B\u4E0D\u61C2</p>`,5),B={id:"random",tabindex:"-1"},V=n("a",{class:"header-anchor",href:"#random","aria-hidden":"true"},"#",-1),L=s(),D={href:"https://zh.cppreference.com/w/cpp/header/random",target:"_blank",rel:"noopener noreferrer"},R=s("random"),O=t(`<p>C++11\u4E4B\u524D\u53EA\u6709<code>srand/rand</code>(<code>&lt;stdlib.h&gt;</code>)\u53EF\u4EE5\u6765\u83B7\u53D6\u5747\u5300\u5206\u5E03\u7684\u968F\u673A\u6570</p><p>\u5728<code>&lt;random&gt;</code>(Since C++11)\u4E2D \u968F\u673A\u6570\u7684\u83B7\u53D6\u5206\u4E3A\u4E86\u4E00\u7EC4\u534F\u4F5C\u7684\u7C7B</p><ul><li>\u968F\u673A\u6570\u5F15\u64CE(Engines) --&gt; \u751F\u6210\u968F\u673A\u7684<code>unsigned</code>\u5E8F\u5217</li><li>\u968F\u673A\u6570\u5206\u5E03(Distribution) --&gt; \u4F7F\u7528<code>Engine</code>\u8FD4\u56DE\u670D\u4ECE\u7279\u5B9A\u5206\u5E03\u7684\u968F\u673A\u6570</li></ul><blockquote><p>\u968F\u673A\u6570(\u4F2A\u968F\u673A\u6570)\u4EA7\u751F\u7684\u539F\u7406\u4E3A \u5BF9\u4E8E\u7ED9\u5B9A\u7684\u521D\u59CB\u503C(seed) \u7ECF\u8FC7\u8BA1\u7B97 \u5F97\u5230\u975E\u5468\u671F\u6027\u7684\u7ED3\u679C</p></blockquote><h3 id="c-like" tabindex="-1"><a class="header-anchor" href="#c-like" aria-hidden="true">#</a> C-like</h3><p>\u6807\u51C6\u5E93\u63D0\u4F9B\u4E00\u4E2A\u9ED8\u8BA4\u7684\u968F\u673A\u6570\u5F15\u64CE<code>std::default_random_engine</code> \u5B83\u7684\u5177\u4F53\u7C7B\u578B\u53D6\u51B3\u4E0E\u7F16\u8BD1\u5668</p><p>\u53EF\u4EE5\u8FD9\u6837\u5B9E\u73B0\u4E00\u4E2A<code>random</code>\u51FD\u6570 <code>std::default_random_engine</code>\u7684\u4E00\u4E2A\u6709\u53C2\u6784\u9020\u51FD\u6570\u6307\u5B9A\u4E86\u521D\u59CB\u5316\u65F6\u7684\u968F\u673A\u6570\u79CD\u5B50</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;random&gt;</span></span>
<span class="token keyword">unsigned</span> <span class="token function">_your_random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>default_random_engine dre<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">dre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="\u5F15\u64CE" tabindex="-1"><a class="header-anchor" href="#\u5F15\u64CE" aria-hidden="true">#</a> \u5F15\u64CE</h3><p>\u5F15\u64CE(<code>Engine</code>)\u7C7B\u6709\u4E00\u4E9B\u901A\u7528\u64CD\u4F5C</p><ul><li><code>Engine::result_type</code> \u5F15\u64CE\u4F7F\u7528\u548C\u751F\u6210\u6570\u503C\u7684\u7C7B\u578B</li><li><code>Engine e;</code></li><li><code>Engine e(seed);</code></li><li><code>e.seed(_seed);</code></li><li><code>e.min/max();</code> \u4E0A\u4E0B\u786E\u754C</li><li><code>e.discard(ull);</code> \u4E22\u5F03\u591A\u4E2A\u968F\u673A\u6570</li></ul><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// discard \u7684\u5B9E\u73B0</span>
<span class="token keyword">void</span> <span class="token function">discard</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> __z<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> __z <span class="token operator">!=</span> <span class="token number">0ULL</span><span class="token punctuation">;</span> <span class="token operator">--</span>__z<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><details class="custom-container details"><summary>\u66F4\u591A\u5F15\u64CE\u7C7B</summary><blockquote><p>\u5F15\u64CE\u6A21\u677F C++11\u5B9E\u73B0\u4E86\u4E09\u79CD\u5F15\u64CE\u6A21\u677F</p><ul><li><code>linear_congruential_engine</code> : \u5B9E\u73B0\u7EBF\u6027\u540C\u4F59\u7B97\u6CD5</li><li><code>mersenne_twister_engine</code> : \u5B9E\u73B0\u6885\u68EE\u7F20\u7ED5\u5668\u7B97\u6CD5</li><li><code>subtract_with_carry_engine</code> : \u5B9E\u73B0\u5E26\u8FDB\u4F4D\u51CF(\u4E00\u79CD\u5EF6\u8FDF\u6590\u6CE2\u90A3\u5951)\u7B97\u6CD5</li></ul></blockquote><p>\u51E0\u79CD\u9884\u5B9A\u4E49\u7684\u968F\u673A\u6570\u751F\u6210\u5668(\u5145\u6EE1\u4E86Magic Number)</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">using</span> minstd_rand0 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>linear_congruential_engine<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>uint_fast32_t<span class="token punctuation">,</span> <span class="token number">16807</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2147483647</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// 1988\u5E74\u7684\u6700\u5C0F\u6807\u51C6</span>
<span class="token keyword">using</span> minstd_rand <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>linear_congruential_engine<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>uint_fast32_t<span class="token punctuation">,</span> <span class="token number">48271</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2147483647</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// 1993\u5E74\u7684\u6700\u5C0F\u6807\u51C6</span>

<span class="token keyword">using</span> mt19937 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>mersenne_twister_engine<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>uint_fast32_t<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">624</span><span class="token punctuation">,</span> <span class="token number">397</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span>
                             <span class="token number">0x9908b0df</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>
                             <span class="token number">0xffffffff</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span>
                             <span class="token number">0x9d2c5680</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>
                             <span class="token number">0xefc60000</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">1812433253</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// 32bit \u6885\u68EE\u7F20\u7ED5\u5668</span>

<span class="token keyword">using</span> mt19937_64 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>mersenne_twister_engine<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>uint_fast64_t<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">312</span><span class="token punctuation">,</span> <span class="token number">156</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span>
                             <span class="token number">0xb5026f5aa96619e9</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span>
                             <span class="token number">0x5555555555555555</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span>
                             <span class="token number">0x71d67fffeda60000</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span>
                             <span class="token number">0xfff7eee000000000</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">6364136223846793005</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// 64bit \u6885\u68EE\u7F20\u7ED5\u5668</span>

<span class="token keyword">using</span> ranlux24_base <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>subtract_with_carry_engine<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>uint_fast32_t<span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> ranlux48_base <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>subtract_with_carry_engine<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>uint_fast64_t<span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></details><h3 id="\u5206\u5E03" tabindex="-1"><a class="header-anchor" href="#\u5206\u5E03" aria-hidden="true">#</a> \u5206\u5E03</h3><p>\u5206\u5E03(<code>Dist</code>)\u7C7B\u6709\u4E00\u4E9B\u901A\u7528\u64CD\u4F5C</p><ul><li><code>Dist d;</code> \u5176\u4ED6\u6784\u9020\u51FD\u6570\u6839\u636E\u5177\u4F53\u7684\u5206\u5E03\u7C7B\u800C\u5B9A</li><li><code>d(e);</code> \u83B7\u53D6\u670D\u4ECE\u8BE5\u5206\u5E03\u7684\u968F\u673A\u6570</li><li><code>d.min/max();</code> \u4E0A\u4E0B\u786E\u754C</li><li><code>d.reset();</code> \u91CD\u7F6E\u5206\u5E03\u72B6\u6001 \u6D88\u9664\u4E4B\u524D\u4EA7\u751F\u6570\u636E\u7684\u5F71\u54CD</li></ul><p>\u5747\u5300\u5206\u5E03\u4EE3\u7801\u793A\u4F8B</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;random&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  std<span class="token double-colon punctuation">::</span>default_random_engine dre<span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>uniform_int_distribution<span class="token operator">&lt;</span><span class="token keyword">unsigned</span><span class="token operator">&gt;</span> <span class="token function">uniform</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u521B\u5EFA\u95ED\u533A\u95F4 [0, 19] \u4E0A\u7684\u5206\u5E03</span>
  std<span class="token double-colon punctuation">::</span>uniform_real_distribution<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span> <span class="token function">ur</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u533A\u95F4 [a, b) \u4E0A\u7684\u5747\u5300\u5206\u5E03</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token function">uniform</span><span class="token punctuation">(</span>dre<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">&quot; &quot;</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>ends<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>\u4F2F\u52AA\u5229\u5206\u5E03\u793A\u4F8B</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;random&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">func</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> times<span class="token punctuation">,</span>func fn<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>times<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">--</span>times<span class="token punctuation">)</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  std<span class="token double-colon punctuation">::</span>default_random_engine dre<span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>bernoulli_distribution bd<span class="token punctuation">;</span>
  <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">1e5</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>count<span class="token operator">+=</span><span class="token function">bd</span><span class="token punctuation">(</span>dre<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span>count<span class="token operator">&lt;&lt;</span><span class="token string">&quot;/&quot;</span><span class="token operator">&lt;&lt;</span><span class="token number">1e5</span><span class="token operator">&lt;&lt;</span><span class="token string">&quot;=&quot;</span><span class="token operator">&lt;&lt;</span>count<span class="token operator">/</span><span class="token number">1e5</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// \u53EF\u80FD\u7ED3\u679C 49922/100000=0.49922</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>\u6240\u6709\u7684\u5206\u5E03\u7C7B\u522B</p><ul><li>\u5747\u5300\u5206\u5E03</li><li>\u4F2F\u52AA\u5229\u5206\u5E03</li><li>\u6CCA\u677E\u5206\u5E03</li><li>\u6B63\u6001\u5206\u5E03</li><li>\u91C7\u6837\u5206\u5E03</li></ul><h3 id="\u7279\u6B8A\u8BBE\u65BD" tabindex="-1"><a class="header-anchor" href="#\u7279\u6B8A\u8BBE\u65BD" aria-hidden="true">#</a> \u7279\u6B8A\u8BBE\u65BD</h3>`,23),j={href:"https://zh.cppreference.com/w/cpp/numeric/random/random_device",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"std::random_device",-1),M=s(":\u751F\u6210\u975E\u786E\u5B9A\u968F\u673A\u6570\u7684\u5747\u5300\u5206\u5E03\u6574\u6570\u968F\u673A\u6570\u751F\u6210\u5668 \u901A\u5E38\u4EC5\u7528\u4E8E\u64AD\u79CD\u7C7B\u4F3C mt19937 \u7684\u4F2A\u968F\u673A\u6570\u751F\u6210\u5668"),F={href:"https://zh.cppreference.com/w/cpp/numeric/random/seed_seq",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"std::seed_seq",-1),K=s(":\u6D88\u8017\u6574\u6570\u503C\u968F\u673A\u6570\u5217 \u5E76\u4EA7\u751F\u65E0\u7B26\u53F7\u6570\u503C"),P=t(`<div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;random&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdint&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  std<span class="token double-colon punctuation">::</span>seed_seq seq<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span><span class="token keyword">uint32_t</span><span class="token operator">&gt;</span> <span class="token function">seeds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  seq<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>seeds<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> seeds<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token keyword">uint32_t</span> n <span class="token operator">:</span> seeds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>`,1),U={id:"move-semantics",tabindex:"-1"},G=n("a",{class:"header-anchor",href:"#move-semantics","aria-hidden":"true"},"#",-1),J=s(),Q={href:"https://zh.cppreference.com/w/cpp/language/reference",target:"_blank",rel:"noopener noreferrer"},Z=s("move semantics"),W=n("div",{class:"custom-container tip"},[n("p",{class:"custom-container-title"},"TIP"),n("p",null,"\u53F3\u503C\u5F15\u7528\u662F \u79FB\u52A8\u6784\u9020\u548C\u79FB\u52A8\u62F7\u8D1D \u7684\u57FA\u7840"),n("p",null,"\u8FD9\u4E09\u8005\u662F\u79FB\u52A8\u8BED\u4E49\u5B9E\u73B0\u7684\u5E95\u5C42")],-1),X=n("p",null,"C++11 \u65B0\u589E",-1),Y=n("ol",null,[n("li",null,"\u53F3\u503C\u5F15\u7528"),n("li",null,"\u79FB\u52A8\u8BED\u4E49"),n("li",null,"\u5B8C\u7F8E\u8F6C\u53D1(forward)")],-1),$=s("C++11 \u5212\u5206\u53F3"),nn={href:"https://zh.cppreference.com/w/cpp/language/value_category",target:"_blank",rel:"noopener noreferrer"},sn=s("\u503C"),an=s("\u4E3A\u4E24\u79CD"),pn=t(`<ul><li>\u5C06\u4EA1\u503C(xvalue, expiring value)</li><li>\u7EAF\u53F3\u503C(pvalue, pure value)</li></ul><blockquote><p>g++\u4F1A\u7701\u7565\u521B\u5EFA\u4E00\u4E2A\u53EA\u662F\u4E3A\u4E86\u521D\u59CB\u5316\u53E6\u4E00\u4E2A\u540C\u7C7B\u578B\u5BF9\u8C61\u7684\u4E34\u65F6\u5BF9\u8C61 <code>-fno-elide-constructors</code> \u6765\u5173\u95ED\u8BE5\u4F18\u5316 <code>-O0</code> \u662F\u4F18\u5316\u7F3A\u7701\u503C \u5E76\u4E0D\u80FD\u5173\u95ED\u4F18\u5316</p></blockquote><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token function">println</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> msg <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span><span class="token operator">*</span> v<span class="token punctuation">;</span>

 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">Int</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ctor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token function">Int</span><span class="token punctuation">(</span>Int <span class="token keyword">const</span><span class="token operator">&amp;</span> val<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>val<span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ref ctor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token function">Int</span><span class="token punctuation">(</span>Int<span class="token operator">&amp;&amp;</span> val<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">v</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    val<span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;rref ctor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">printThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%p\\n&quot;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">printInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%p\\n&quot;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  Int<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Int<span class="token operator">&amp;</span> iv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>iv<span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;copy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  Int<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>Int<span class="token operator">&amp;&amp;</span> iv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    v <span class="token operator">=</span> iv<span class="token punctuation">.</span>v<span class="token punctuation">;</span>
    iv<span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;r copy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token operator">~</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token keyword">delete</span> v<span class="token punctuation">;</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;dtor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
Int <span class="token function">ret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Int <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">xvalue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">/**
   * #1 Int a(0) ctor
   * #2 return a;-&gt; \u4E00\u4E2A\u4E34\u65F6\u5BF9\u8C61 rref ctor
   * #1 dctor
   * #3 a \u79FB\u52A8\u6784\u9020  rref ctor
   * #2 dctor
  */</span>
  Int a <span class="token operator">=</span> <span class="token function">ret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\tBefore b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Int<span class="token operator">&amp;&amp;</span> b <span class="token operator">=</span> <span class="token function">ret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5EF6\u7EED\u8FD4\u56DE\u7684\u4E34\u65F6\u5BF9\u8C61\u7684\u751F\u547D\u5468\u671F</span>
  <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\tBefore End&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">printThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  Int<span class="token operator">&amp;&amp;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Int <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">printThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  a<span class="token punctuation">.</span><span class="token function">printThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">printInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  Int<span class="token operator">&amp;&amp;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Int <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">printInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  a<span class="token punctuation">.</span><span class="token function">printInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  Int <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  a<span class="token punctuation">.</span><span class="token function">printInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Int b <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  a<span class="token punctuation">.</span><span class="token function">printInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  b<span class="token punctuation">.</span><span class="token function">printInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br></div></div><p>\u4EE5\u4E0B\u5747\u5C55\u793A\u5173\u95ED\u6784\u9020\u51FD\u6570\u4F18\u5316\u540E\u7684\u7ED3\u679C \u4E0D\u540C\u6807\u9898\u540D\u4EE3\u8868\u4E0D\u540C\u7684\u51FD\u6570</p><h3 id="xvalue" tabindex="-1"><a class="header-anchor" href="#xvalue" aria-hidden="true">#</a> xvalue</h3><details class="custom-container details"><summary>xvalue() \u7ED3\u679C</summary><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>ctor
rref ctor
dtor
rref ctor
dtor
        Before b
ctor
rref ctor
dtor
        Before End
dtor
dtor
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></details><h3 id="printthis" tabindex="-1"><a class="header-anchor" href="#printthis" aria-hidden="true">#</a> printThis</h3><p>\u4F60\u65E0\u6CD5\u83B7\u53D6\u5C40\u90E8\u5BF9\u8C61 \u8FD9\u662F\u80AF\u5B9A\u7684</p><details class="custom-container details"><summary>printThis() \u7ED3\u679C</summary><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>ctor
0x7ffc643384b0
rref ctor
dtor

0x7ffc643384f0
dtor
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></details><h3 id="printint" tabindex="-1"><a class="header-anchor" href="#printint" aria-hidden="true">#</a> printInt</h3><p>\u4F46\u662F\u4F60\u53EF\u4EE5\u4E00\u76F4\u6301\u6709\u539F\u6765\u7684\u8D44\u6E90 \u8FD9\u662F\u80FD\u529E\u5230\u7684</p><details class="custom-container details"><summary>printInt() \u7ED3\u679C</summary><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>ctor
0x55b5773e9eb0
rref ctor
dtor

0x55b5773e9eb0
dtor
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></details><h3 id="move" tabindex="-1"><a class="header-anchor" href="#move" aria-hidden="true">#</a> move</h3><p><code>std::move</code> \u53EA\u662F\u5355\u7EAF\u7684\u7C7B\u578B\u8F6C\u6362 <code>lvalue -&gt; rvalue</code> \u4F46\u662F\u80FD\u8BA9\u4F60\u7B80\u5355\u7684\u8D44\u6E90\u632A\u4F4D \u800C\u975E\u91CD\u65B0\u6784\u9020</p><details class="custom-container details"><summary>move() \u7ED3\u679C</summary><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>ctor
0x558542ebbeb0
rref ctor
(nil)
0x558542ebbeb0
dtor
dtor
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></details><h3 id="std-forward" tabindex="-1"><a class="header-anchor" href="#std-forward" aria-hidden="true">#</a> std::forward</h3><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">callG</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u6D89\u53CA\u77E5\u8BC6\u70B9 \u5F15\u7528\u6298\u53E0</span>
  <span class="token function">g</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="\u63A8\u5BFC" tabindex="-1"><a class="header-anchor" href="#\u63A8\u5BFC" aria-hidden="true">#</a> \u63A8\u5BFC</h2><h3 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof" aria-hidden="true">#</a> typeof</h3><blockquote><p>gcc only</p></blockquote><p>C++11\u6807\u51C6\u524D \u7C7B\u4F3C<code>decltype</code>\u529F\u80FD\u7684\u8FD0\u7B97\u7B26</p><h3 id="typeid" tabindex="-1"><a class="header-anchor" href="#typeid" aria-hidden="true">#</a> typeid</h3><p>\u83B7\u53D6\u76EE\u6807\u64CD\u4F5C\u6570\u7C7B\u578B\u7684\u8FD0\u7B97\u7B26 \u8FD4\u56DE\u7684\u662F\u5DE6\u503C \u53EA\u4F1A\u6D89\u53CA\u57FA\u672C\u7C7B\u578B \u4E0D\u5305\u542BCV\u9650\u5B9A\u7B26\u548C\u5F15\u7528</p><h3 id="auto" tabindex="-1"><a class="header-anchor" href="#auto" aria-hidden="true">#</a> auto</h3><ol><li>\u5BF9\u4E8E\u53D8\u91CF \u4ECE\u5B83\u7684\u521D\u59CB\u5316\u5668\u63A8\u5BFC\u51FA\u5B83\u7684\u7C7B\u578B(Since C++11)</li><li>\u5BF9\u4E8E\u51FD\u6570 \u4ECE\u5B83\u7684return\u8BED\u53E5\u63A8\u5BFC\u51FA\u7C7B\u578B(Since C++14)</li><li>\u5BF9\u4E8E\u975E\u7C7B\u578B\u6A21\u677F\u5F62\u53C2 \u6307\u5B9A\u8981\u4ECE\u5B9E\u53C2\u63A8\u5BFC\u51FA\u5B83\u7684\u7C7B\u578B(Since C++20)</li></ol><p>\u53EF\u914D\u5408cv\u9650\u5B9A\u7B26\u548C<code>&amp;</code>/<code>*</code>(\u5F15\u7528/\u6307\u9488)\u8FD9\u6837\u7684\u4FEE\u9970\u7B26\u4E00\u8D77\u4F7F\u7528</p><h3 id="decltype" tabindex="-1"><a class="header-anchor" href="#decltype" aria-hidden="true">#</a> decltype</h3>`,27),tn={href:"https://zh.cppreference.com/w/cpp/language/decltype",target:"_blank",rel:"noopener noreferrer"},en=s("3\u6761\u63A8\u5BFC\u89C4\u5219"),on=t(`<ol><li>\u5982\u679C\u5B9E\u53C2\u662F\u6CA1\u6709\u62EC\u53F7\u7684\u6807\u8BC6\u8868\u8FBE\u5F0F\u6216\u7C7B\u6210\u5458\u8BBF\u95EE\u8868\u8FBE\u5F0F \u90A3\u4E48 <code>decltype</code> \u4EA7\u751F\u4EE5\u8BE5\u8868\u8FBE\u5F0F\u547D\u540D\u7684\u5B9E\u4F53\u7684\u7C7B\u578B <ol><li>\u5982\u679C\u6CA1\u6709\u8FD9\u79CD\u5B9E\u4F53\u6216\u8BE5\u5B9E\u53C2\u6307\u540D\u4E86\u4E00\u7EC4\u91CD\u8F7D\u51FD\u6570 \u90A3\u4E48\u7A0B\u5E8F\u975E\u826F\u6784(\u5373\u9519\u8BEF\u7684)</li><li>\u5982\u679C\u5B9E\u53C2\u662F\u6307\u540D\u67D0\u4E2A\u7ED3\u6784\u5316\u7ED1\u5B9A\u7684\u6CA1\u6709\u62EC\u53F7\u7684\u6807\u8BC6\u8868\u8FBE\u5F0F \u90A3\u4E48 <code>decltype</code> \u4EA7\u751F\u5176\u88AB\u5F15\u7528\u7C7B\u578B(Since C++17)</li><li>\u5982\u679C\u5B9E\u53C2\u662F\u6307\u540D\u67D0\u4E2A\u975E\u7C7B\u578B\u6A21\u677F\u5F62\u53C2\u7684\u6CA1\u6709\u62EC\u53F7\u7684\u6807\u8BC6\u8868\u8FBE\u5F0F \u90A3\u4E48 <code>decltype</code> \u751F\u6210\u8BE5\u6A21\u677F\u5F62\u53C2\u7684\u7C7B\u578B(\u5F53\u8BE5\u6A21\u677F\u5F62\u53C2\u4EE5\u5360\u4F4D\u7B26\u7C7B\u578B\u58F0\u660E\u65F6\uFF0C\u7C7B\u578B\u4F1A\u5148\u8FDB\u884C\u4EFB\u4F55\u6240\u9700\u7684\u7C7B\u578B\u63A8\u5BFC)(Since C++20)</li></ol></li><li>\u5982\u679C\u5B9E\u53C2\u662F\u5176\u4ED6\u7C7B\u578B\u4E3A <code>T</code>(\u53EF\u4EE5\u662F\u4E0D\u5B8C\u6574\u7C7B\u578B) \u7684\u4EFB\u4F55\u8868\u8FBE\u5F0F <ol><li>\u5982\u679C \u8868\u8FBE\u5F0F \u7684\u503C\u7C7B\u522B\u662F<strong>\u4EA1\u503C</strong> \u5C06\u4F1A <code>decltype-&gt;T&amp;&amp;</code></li><li>\u5982\u679C \u8868\u8FBE\u5F0F \u7684\u503C\u7C7B\u522B\u662F<strong>\u5DE6\u503C</strong> \u5C06\u4F1A <code>decltype-&gt;T&amp;</code></li><li>\u5982\u679C \u8868\u8FBE\u5F0F \u7684\u503C\u7C7B\u522B\u662F<strong>\u7EAF\u53F3\u503C</strong> \u5C06\u4F1A <code>decltype-&gt;T</code></li><li>\u5982\u679C \u8868\u8FBE\u5F0F \u662F\u8FD4\u56DE\u7C7B\u7C7B\u578B\u7EAF\u53F3\u503C\u7684\u51FD\u6570\u8C03\u7528 \u6216\u662F\u53F3\u64CD\u4F5C\u6570\u4E3A\u8FD9\u79CD\u51FD\u6570\u8C03\u7528\u7684\u9017\u53F7\u8868\u8FBE\u5F0F \u90A3\u4E48\u4E0D\u4F1A\u5BF9\u8BE5\u7EAF\u53F3\u503C\u5F15\u5165\u4E34\u65F6\u91CF (Before C++17)</li><li>\u5982\u679C \u8868\u8FBE\u5F0F \u662F~~\u9664\u4E86\uFF08\u53EF\u5E26\u62EC\u53F7\u7684\uFF09\u7ACB\u5373\u8C03\u7528\u4EE5\u5916\u7684 (Since C++20)~~\u7EAF\u53F3\u503C\uFF0C\u90A3\u4E48\u4E0D\u4F1A\u4ECE\u8BE5\u7EAF\u53F3\u503C\u5B9E\u8D28\u5316\u4E34\u65F6\u5BF9\u8C61:\u5373\u8FD9\u79CD\u7EAF\u53F3\u503C\u6CA1\u6709\u7ED3\u679C\u5BF9\u8C61\u3002(Since C++17)</li></ol></li><li>\u5982\u679C\u5BF9\u8C61\u7684\u540D\u5B57\u5E26\u6709\u62EC\u53F7 \u90A3\u4E48\u5B83\u4F1A\u88AB\u5F53\u505A\u901A\u5E38\u7684\u5DE6\u503C\u8868\u8FBE\u5F0F \u4ECE\u800C<code>decltype(x)</code> \u548C <code>decltype((x))</code> \u901A\u5E38\u662F\u4E0D\u540C\u7684\u7C7B\u578B</li></ol><p>\u5BF9\u4E8E\u7B2C\u4E00\u6761\u89C4\u5219</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;type_traits&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/move.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span><span class="token operator">*</span> j<span class="token operator">=</span><span class="token operator">&amp;</span>i<span class="token punctuation">;</span>
  <span class="token keyword">int</span> n<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">decltype</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// int&amp; // \u4F46\u4E0D\u4F1A\u8D4B\u503C(Clang)</span>
  <span class="token comment">// rule 1</span>
  <span class="token keyword">static_assert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_same_v<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">static_assert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_same_v<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">static_assert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_same_v<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">static_assert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_same_v<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&amp;&amp;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;&amp;</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">static_assert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_same_v<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">static_assert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_same_v<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// rule 2</span>
  <span class="token keyword">static_assert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_same_v<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;&amp;</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// xvalue</span>
  <span class="token keyword">static_assert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_same_v<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// comma/lvalue</span>
  <span class="token keyword">static_assert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_same_v<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// rvalue</span>
  <span class="token keyword">static_assert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_same_v<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// lvalue</span>

  <span class="token comment">// rule 3</span>
  <span class="token keyword">static_assert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_same_v<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">cv\u9650\u5B9A\u7B26</p><p>\u901A\u5E38\u60C5\u51B5\u4E0B <code>decltype</code> \u4F1A\u63A8\u5BFC\u51FAcv\u9650\u5B9A\u7B26</p><p>\u4F46\u5F53\u8868\u8FBE\u5F0F\u662F\u6210\u5458\u53D8\u91CF\u65F6 \u7236\u5BF9\u8C61\u7684\u9650\u5B9A\u7B26\u4F1A\u88AB\u5FFD\u7565</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
  <span class="token keyword">double</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> A<span class="token operator">*</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static_assert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_same_v<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>a<span class="token operator">-&gt;</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">double</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static_assert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>is_same_v<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">-&gt;</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">double</span><span class="token operator">&amp;</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u4F46\u591A\u52A0\u4E00\u5C42\u62EC\u53F7\u4F1A\u6539\u53D8\u7ED3\u679C</p></div><h3 id="decltype-auto" tabindex="-1"><a class="header-anchor" href="#decltype-auto" aria-hidden="true">#</a> decltype(auto)</h3><blockquote><p>Since C++14</p></blockquote><ol><li>\u53EA\u80FD\u72EC\u7ACB\u4F7F\u7528(\u4E0D\u80FD\u642D\u914Dcv\u9650\u5B9A \u6307\u9488/\u5F15\u7528)</li><li>\u4F7F<code>auto</code>\u63A8\u5BFC\u4F7F\u7528<code>decltype</code>\u65B9\u5F0F</li></ol><h2 id="\u4F18\u79C0\u6587\u7AE0-\u535A\u5BA2" tabindex="-1"><a class="header-anchor" href="#\u4F18\u79C0\u6587\u7AE0-\u535A\u5BA2" aria-hidden="true">#</a> \u4F18\u79C0\u6587\u7AE0/\u535A\u5BA2</h2><h3 id="\u6A21\u677F" tabindex="-1"><a class="header-anchor" href="#\u6A21\u677F" aria-hidden="true">#</a> \u6A21\u677F</h3>`,9),cn={href:"https://fuzhe1989.github.io/2018/04/21/crtp/",target:"_blank",rel:"noopener noreferrer"},ln=s("CRTP"),un=n("h3",{id:"\u5185\u5B58\u7BA1\u7406",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u5185\u5B58\u7BA1\u7406","aria-hidden":"true"},"#"),s(" \u5185\u5B58\u7BA1\u7406")],-1),rn={href:"https://segmentfault.com/a/1190000039348996#item-6",target:"_blank",rel:"noopener noreferrer"},kn=s("C++ \u5185\u5B58\u95EE\u9898"),dn=s("\u5341\u95EE Linux\u865A\u62DF\u5185\u5B58\u7BA1\u7406 "),bn={href:"https://cloud.tencent.com/developer/article/1004428",target:"_blank",rel:"noopener noreferrer"},mn=s("1-4"),hn={href:"https://cloud.tencent.com/developer/article/1004429",target:"_blank",rel:"noopener noreferrer"},_n=s("6-10"),gn=n("h3",{id:"\u79FB\u52A8\u8BED\u4E49",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u79FB\u52A8\u8BED\u4E49","aria-hidden":"true"},"#"),s(" \u79FB\u52A8\u8BED\u4E49")],-1),fn={href:"https://segmentfault.com/a/1190000016041544#item-4",target:"_blank",rel:"noopener noreferrer"},yn=s("C++11 \u79FB\u52A8\u8BED\u4E49"),vn={href:"https://mp.weixin.qq.com/s/_9-0iNUw6KHTF3a-vSMCmg",target:"_blank",rel:"noopener noreferrer"},wn=s("Modern C++ \u5DE6\u503C \u53F3\u503C"),xn={href:"https://zhuanlan.zhihu.com/p/138210501",target:"_blank",rel:"noopener noreferrer"},qn=s("lvalue\uFF0Crvalue\u548Cmove"),In={href:"https://zhuanlan.zhihu.com/p/99524127",target:"_blank",rel:"noopener noreferrer"},Cn=s("\u73B0\u4EE3C++\u4E4B\u4E07\u80FD\u5F15\u7528\u3001\u5B8C\u7F8E\u8F6C\u53D1\u3001\u5F15\u7528\u6298\u53E0");function zn(Tn,Sn){const a=e("ExternalLinkIcon");return o(),c(l,null,[i,n("p",null,[k,n("a",d,[b,p(a)])]),m,n("ul",null,[n("li",null,[n("a",h,[_,p(a)])]),n("li",null,[n("a",g,[f,p(a)])])]),n("h2",y,[v,w,n("a",x,[q,p(a)])]),I,n("h2",C,[z,T,n("a",S,[E,p(a)])]),N,n("h2",B,[V,L,n("a",D,[R,p(a)])]),O,n("p",null,[n("a",j,[A,p(a)]),M]),n("p",null,[n("a",F,[H,p(a)]),K]),P,n("h2",U,[G,J,n("a",Q,[Z,p(a)])]),W,X,Y,n("p",null,[$,n("a",nn,[sn,p(a)]),an]),pn,n("p",null,[n("a",tn,[en,p(a)])]),on,n("ul",null,[n("li",null,[n("a",cn,[ln,p(a)])])]),un,n("ul",null,[n("li",null,[n("a",rn,[kn,p(a)])]),n("li",null,[dn,n("ul",null,[n("li",null,[n("a",bn,[mn,p(a)])]),n("li",null,[n("a",hn,[_n,p(a)])])])])]),gn,n("ul",null,[n("li",null,[n("a",fn,[yn,p(a)])]),n("li",null,[n("a",vn,[wn,p(a)])]),n("li",null,[n("a",xn,[qn,p(a)])]),n("li",null,[n("a",In,[Cn,p(a)])])])],64)}var Bn=u(r,[["render",zn]]);export{Bn as default};
