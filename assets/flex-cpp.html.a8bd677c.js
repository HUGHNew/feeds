import{r as t,o,c,a as n,b as e,F as l,d as s,e as p}from"./app.7d274c27.js";import{_ as r}from"./plugin-vue_export-helper.21dcd24c.js";const u={},i={id:"\u751F\u6210c-\u7684\u8BCD\u6CD5\u751F\u6210\u5668",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#\u751F\u6210c-\u7684\u8BCD\u6CD5\u751F\u6210\u5668","aria-hidden":"true"},"#",-1),d=s(),b={href:"https://www.cs.virginia.edu/~cr4bd/flex-manual/Cxx.html#Cxx",target:"_blank",rel:"noopener noreferrer"},m=s("\u751F\u6210C++\u7684\u8BCD\u6CD5\u751F\u6210\u5668"),_=s("\u7FFB\u8BD1\u81EA"),y={href:"https://www.cs.virginia.edu/~cr4bd/flex-manual/Cxx.html#Cxx",target:"_blank",rel:"noopener noreferrer"},x=s("1"),h=s(" \u5BF9\u539F\u6587\u683C\u5F0F\u6709\u4E00\u70B9\u5C0F\u4FEE\u6539"),f=n("div",{class:"custom-container warning"},[n("p",{class:"custom-container-title"},"\u5B9E\u9A8C\u6027"),n("p",null,"\u76EE\u524D\u626B\u63CF\u7C7B(scanning class)\u7684\u5F62\u5F0F\u662F\u5B9E\u9A8C\u6027\u7684\uFF0C\u5728\u4E3B\u8981\u7248\u672C\u4E4B\u95F4\u53EF\u80FD\u4F1A\u6709\u5F88\u5927\u7684\u53D8\u5316\u3002")],-1),w=n("blockquote",null,[n("p",null,"scanner/lexer \u8BCD\u6CD5\u751F\u6210\u5668/lexer \u8BA4\u5B9A\u4E3A\u540C\u4E00\u4E2A\u4E1C\u897F")],-1),g=n("code",null,"flex",-1),v=s(" \u63D0\u4F9B\u4E86\u4E24\u79CD\u4E0D\u540C\u7684\u65B9\u5F0F\u53BB\u751F\u6210C++\u4EE3\u7801\u7684lexer\u3002\u7B2C\u4E00\u79CD\u65B9\u6CD5\u662F\u7B80\u5355\u5730\u4F7F\u7528 C++ \u7F16\u8BD1\u5668\u800C\u4E0D\u662F C \u7F16\u8BD1\u5668\u7F16\u8BD1"),L=n("code",null,"flex",-1),F=s("\u751F\u6210\u7684lexer\u3002\u4F60\u5E94\u8BE5\u4E0D\u4F1A\u9047\u5230\u4EFB\u4F55\u7F16\u8BD1\u9519\u8BEF\uFF08\u89C1"),q={href:"https://www.cs.virginia.edu/~cr4bd/flex-manual/Reporting-Bugs.html#Reporting-Bugs",target:"_blank",rel:"noopener noreferrer"},C=s("\u62A5\u544A\u9519\u8BEF"),Y=s("\u3002\u7136\u540E\u4F60\u53EF\u4EE5\u5728\u4F60\u7684\u89C4\u5219\u52A8\u4F5C\u4E2D\u4F7F\u7528C++\u4EE3\u7801\u800C\u4E0D\u662FC\u4EE3\u7801\u3002\u6CE8\u610F\uFF0C\u4F60\u7684scanner\u7684\u9ED8\u8BA4\u8F93\u5165\u6E90\u4ECD\u7136\u662F"),E=n("code",null,"yyin",-1),I=s("\uFF0C\u9ED8\u8BA4\u7684"),z=n("code",null,"echo",-1),S=s("\u4ECD\u7136\u662F\u5BF9"),T=n("code",null,"yyout",-1),N=s("\u8FDB\u884C\u7684\u3002\u8FD9\u4E24\u4E2A\u4ECD\u7136\u662F "),B=n("code",null,"FILE *",-1),R=s(" \u53D8\u91CF\uFF0C\u800C\u4E0D\u662FC++\u6D41(streams)\u3002"),O=p('<p>\u4F60\u4E5F\u53EF\u4EE5\u4F7F\u7528<code>flex</code>\u751F\u6210\u4E00\u4E2AC++scanner\u7C7B\uFF0C\u4F7F\u7528<code>-+</code>\u9009\u9879\uFF08\u6216\u8005\uFF0C\u4F7F\u7528<code>%option c++</code>\uFF09\uFF0C\u5982\u679C<code>flex</code>\u53EF\u6267\u884C\u6587\u4EF6\u7684\u540D\u79F0\u4EE5&#39;+&#39;\u7ED3\u5C3E\uFF0C\u4F8B\u5982<code>flex++</code>\uFF0C\u5219\u81EA\u52A8\u6307\u5B9A\u8BE5\u9009\u9879\u3002\u5F53\u4F7F\u7528\u8BE5\u9009\u9879\u65F6\uFF0Cflex\u9ED8\u8BA4\u751F\u6210\u7684scanner\u4E3A<code>lex.yy.cc</code>\u6587\u4EF6\uFF0C\u800C\u4E0D\u662F<code>lex.yy.c</code>\u3002\u751F\u6210\u7684scanner\u5305\u62EC\u5934\u6587\u4EF6<code>FlexLexer.h</code>\uFF0C\u5B83\u5B9A\u4E49\u4E86\u4E24\u4E2AC++\u7C7B\u7684\u63A5\u53E3\u3002</p><h2 id="flexlexer-h" tabindex="-1"><a class="header-anchor" href="#flexlexer-h" aria-hidden="true">#</a> FlexLexer.h</h2><p><code>FlexLexer.h</code></p><ul><li><code>FlexLexer</code>: \u63D0\u4F9B\u4E86\u4E00\u4E2A\u5B9A\u4E49\u4E00\u822Cscanner\u7C7B\u63A5\u53E3\u7684\u62BD\u8C61\u57FA\u7C7B\u3002</li><li><code>yyFlexLexer</code>\uFF0C\u6D3E\u751F\u4E8E<code>FlexLexer</code>\u3002\u5B9A\u4E49\u4E86\u989D\u5916\u7684\u6210\u5458\u51FD\u6570</li></ul><h3 id="flexlexer" tabindex="-1"><a class="header-anchor" href="#flexlexer" aria-hidden="true">#</a> FlexLexer</h3><p>\u63D0\u4F9B\u4E86\u4EE5\u4E0B\u6210\u5458\u51FD\u6570\u3002</p>',6),V=n("li",null,[n("code",null,"const char* YYText()"),s(": \u8FD4\u56DE\u6700\u8FD1\u5339\u914D\u7684\u6807\u8BB0\u7684\u6587\u672C\uFF0C\u76F8\u5F53\u4E8Eyytext\u3002")],-1),A=n("li",null,[n("code",null,"int YYLeng()"),s(": \u8FD4\u56DE\u6700\u8FD1\u5339\u914D\u7684\u6807\u8BB0\u7684\u957F\u5EA6\uFF0C\u76F8\u5F53\u4E8Eyyleng\u3002")],-1),P=n("li",null,[n("code",null,"int lineno() const"),s(": \u8FD4\u56DE\u5F53\u524D\u7684\u8F93\u5165\u884C\u6570\uFF08\u89C1"),n("code",null,"%option yylineno"),s("\uFF09\uFF0C\u5982\u679C\u6CA1\u6709\u4F7F\u7528"),n("code",null,"%option yylineno"),s("\uFF0C\u5219\u8FD4\u56DE1\u3002")],-1),U=n("code",null,"void set_debug( int flag )",-1),j=s(": \u8BBE\u7F6Escanner\u7684\u8C03\u8BD5\u6807\u5FD7\uFF0C\u76F8\u5F53\u4E8E\u5206\u914D\u7ED9"),$=n("code",null,"yy_flex_debug",-1),Z=s("\uFF08\u89C1"),D={href:"https://www.cs.virginia.edu/~cr4bd/flex-manual/Scanner-Options.html#Scanner-Options",target:"_blank",rel:"noopener noreferrer"},G=s("scanner\u9009\u9879"),H=s("\uFF09\u3002\u6CE8\u610F\uFF0C\u4F60\u5FC5\u987B\u4F7F\u7528"),J=n("code",null,"%option debug",-1),K=s("\u6765\u6784\u5EFAscanner\uFF0C\u4EE5\u4FBF\u5728\u5176\u4E2D\u5305\u542B\u8C03\u8BD5\u4FE1\u606F\u3002"),M=n("li",null,[n("code",null,"int debug() const"),s(": \u8FD4\u56DE\u5F53\u524D\u8C03\u8BD5\u6807\u5FD7\u7684\u8BBE\u7F6E\u3002")],-1),Q=p(`<p>\u8FD8\u63D0\u4F9B\u4E86\u76F8\u5F53\u4E8E<code>yy_switch_to_buffer()</code>\u3001<code>yy_create_buffer()</code>\uFF08\u5C3D\u7BA1\u7B2C\u4E00\u4E2A\u53C2\u6570\u662F\u4E00\u4E2A<code>istream&amp;</code>\u5BF9\u8C61\u5F15\u7528\uFF0C\u800C\u4E0D\u662F\u4E00\u4E2A<code>FILE*</code>\uFF09\u3001<code>yy_flush_buffer()</code>\u3001<code>yy_delete_buffer()</code>\u548C<code>yyrestart()</code>\uFF08\u540C\u6837\uFF0C\u7B2C\u4E00\u4E2A\u53C2\u6570\u662F\u4E00\u4E2A<code>istream&amp;</code>\u5BF9\u8C61\u5F15\u7528\uFF09\u7684\u6210\u5458\u51FD\u6570\u3002</p><h3 id="yyflexlexer" tabindex="-1"><a class="header-anchor" href="#yyflexlexer" aria-hidden="true">#</a> yyFlexLexer</h3><p>\u5B9A\u4E49\u4E86\u4EE5\u4E0B\u989D\u5916\u7684\u6210\u5458\u51FD\u6570\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token function">yyFlexLexer</span><span class="token punctuation">(</span> istream<span class="token operator">*</span> arg_yyin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ostream<span class="token operator">*</span> arg_yyout <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">yyFlexLexer</span><span class="token punctuation">(</span> istream<span class="token operator">&amp;</span> arg_yyin<span class="token punctuation">,</span> ostream<span class="token operator">&amp;</span> arg_yyout <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>virtual int yylex()</code> \u6267\u884C\u4E0E<code>yylex()</code>\u5BF9\u666E\u901A<code>flex</code>scanner\u76F8\u540C\u7684\u4F5C\u7528\uFF1A\u5B83\u626B\u63CF\u8F93\u5165\u6D41\uFF0C\u6D88\u8017token\uFF0C\u76F4\u5230\u89C4\u5219\u7684\u52A8\u4F5C\u8FD4\u56DE\u4E00\u4E2A\u503C\u3002\u5982\u679C\u4F60\u4ECE<code>yyFlexLexer</code>\u6D3E\u751F\u51FA\u4E00\u4E2A\u5B50\u7C7B<code>S</code>\uFF0C\u5E76\u60F3\u5728<code>yylex()</code>\u4E2D\u8BBF\u95EE<code>S</code>\u7684\u6210\u5458\u51FD\u6570\u548C\u53D8\u91CF\uFF0C\u90A3\u4E48\u4F60\u9700\u8981\u4F7F\u7528<code>%option yyclass=&quot;S&quot;</code>\u6765\u901A\u77E5flex\uFF0C\u4F60\u5C06\u4F7F\u7528\u8BE5\u5B50\u7C7B\u800C\u4E0D\u662F<code>yyFlexLexer</code>\u3002\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C<code>flex</code>\u4E0D\u4F1A\u751F\u6210<code>yyFlexLexer::yylex()</code>\uFF0C\u800C\u662F\u751F\u6210<code>S::yylex()</code></p><blockquote><p>\u540C\u65F6\u4E5F\u4F1A\u751F\u6210\u4E00\u4E2A\u5047\u7684<code>yyFlexLexer::yylex()</code>\uFF0C\u5982\u679C\u88AB\u8C03\u7528\uFF0C\u5219\u8C03\u7528<code>yyFlexLexer::LexerError()</code>\u3002</p></blockquote><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">switch_streams</span><span class="token punctuation">(</span>istream<span class="token operator">*</span> new_in <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ostream<span class="token operator">*</span> new_out <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">switch_streams</span><span class="token punctuation">(</span>istream<span class="token operator">&amp;</span> new_in<span class="token punctuation">,</span> ostream<span class="token operator">&amp;</span> new_out<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>\u91CD\u65B0\u5206\u914D<code>yyin</code>\u5230<code>new_in</code>\uFF08\u5982\u679C\u975E\u7A7A\uFF09\u548C<code>yyout</code>\u5230<code>new_out</code>\uFF08\u5982\u679C\u975E\u7A7A\uFF09\uFF0C\u5982\u679C<code>yyin</code>\u88AB\u91CD\u65B0\u5206\u914D\uFF0C\u5219\u5220\u9664\u4E4B\u524D\u7684\u8F93\u5165\u7F13\u51B2\u533A\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">yylex</span><span class="token punctuation">(</span> istream<span class="token operator">*</span> new_in<span class="token punctuation">,</span> ostream<span class="token operator">*</span> new_out <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">yylex</span><span class="token punctuation">(</span> istream<span class="token operator">&amp;</span> new_in<span class="token punctuation">,</span> ostream<span class="token operator">&amp;</span> new_out <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>\u9996\u5148\u901A\u8FC7<code>switch_streams(new_in\uFF0Cnew_out)</code>\u5207\u6362\u8F93\u5165\u6D41\uFF0C\u7136\u540E\u8FD4\u56DE<code>yylex()</code>\u7684\u503C\u3002</p><p>:::detail yylex(new_int,new_out)</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// \u53EF\u80FD\u7684\u5B9E\u73B0</span>
<span class="token keyword">int</span> <span class="token function">yylex</span><span class="token punctuation">(</span> istream<span class="token operator">*</span> new_in<span class="token punctuation">,</span> ostream<span class="token operator">*</span> new_out <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">switch_streams</span><span class="token punctuation">(</span>new_in<span class="token punctuation">,</span>new_out<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">yylex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">yylex</span><span class="token punctuation">(</span> istream<span class="token operator">&amp;</span> new_in<span class="token punctuation">,</span> ostream<span class="token operator">&amp;</span> new_out <span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">switch_streams</span><span class="token punctuation">(</span>new_in<span class="token punctuation">,</span>new_out<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">yylex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>:::</p><p>\u6B64\u5916\uFF0C<code>yyFlexLexer</code>\u5B9A\u4E49\u4E86\u4EE5\u4E0B\u53D7\u4FDD\u62A4\u7684\u865A\u51FD\u6570\uFF0C\u4F60\u53EF\u4EE5\u5728\u6D3E\u751F\u7C7B\u4E2D\u91CD\u65B0\u5B9A\u4E49\u8FD9\u4E9B\u51FD\u6570\uFF0C\u4EE5\u5B9A\u5236scanner\u3002</p><h4 id="protected" tabindex="-1"><a class="header-anchor" href="#protected" aria-hidden="true">#</a> protected</h4><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">LexerInput</span><span class="token punctuation">(</span> <span class="token keyword">char</span><span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> max_size <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>`,16),W=s("\u5411buf\u4E2D\u8BFB\u53D6\u6700\u591Amax_size\u7684\u5B57\u7B26\uFF0C\u5E76\u8FD4\u56DE\u8BFB\u53D6\u7684\u5B57\u7B26\u6570\u3002\u4E3A\u4E86\u8868\u793A\u8F93\u5165\u7ED3\u675F\uFF0C\u8FD4\u56DE0\u4E2A\u5B57\u7B26\u3002\u6CE8\u610F\uFF0C\u4EA4\u4E92\u5F0Fscanner\uFF08\u89C1"),X={href:"https://www.cs.virginia.edu/~cr4bd/flex-manual/Scanner-Options.html#Scanner-Options",target:"_blank",rel:"noopener noreferrer"},nn=s("scanner\u9009\u9879"),sn=s("\u4E2D\u7684"),an=n("code",null,"-B",-1),en=s("\u548C"),pn=n("code",null,"-I",-1),tn=s("\u6807\u5FD7\uFF09\u5B9A\u4E49\u4E86\u5B8F"),on=n("code",null,"YY_INTERACTIVE",-1),cn=s("\u3002\u5982\u679C\u4F60\u91CD\u65B0\u5B9A\u4E49\u4E86"),ln=n("code",null,"LexerInput()",-1),rn=s("\uFF0C\u5E76\u4E14\u9700\u8981\u6839\u636Escanner\u662F\u5426\u53EF\u80FD\u6B63\u5728\u626B\u63CF\u4E00\u4E2A\u4EA4\u4E92\u5F0F\u8F93\u5165\u6E90\u800C\u91C7\u53D6\u4E0D\u540C\u7684\u884C\u52A8\uFF0C\u4F60\u53EF\u4EE5\u901A\u8FC7"),un=n("code",null,"#ifdef",-1),kn=s("\u8BED\u53E5\u6D4B\u8BD5\u8FD9\u4E2A\u540D\u5B57\u7684\u5B58\u5728\u3002"),dn=p(`<div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">LexerOutput</span><span class="token punctuation">(</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> size <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>\u4ECE\u7F13\u51B2\u533Abuf\u4E2D\u5199\u51FAsize\u7684\u5B57\u7B26\uFF0C\u867D\u7136\u662FNUL\u7ED3\u5C3E\u7684\uFF0C\u4F46\u5982\u679Cscanner\u7684\u89C4\u5219\u53EF\u4EE5\u5339\u914D\u5176\u4E2D\u6709NUL\u7684\u6587\u672C\uFF0C\u90A3\u4E48\u5B83\u4E5F\u53EF\u80FD\u5305\u542B\u5185\u90E8\u7684NUL\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">LexerError</span><span class="token punctuation">(</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>\u62A5\u544A\u4E00\u4E2A\u81F4\u547D\u7684\u9519\u8BEF\u4FE1\u606F\u3002\u8FD9\u4E2A\u51FD\u6570\u7684\u9ED8\u8BA4\u7248\u672C\u5C06\u4FE1\u606F\u5199\u5165\u6D41<code>cerr</code>\u5E76\u9000\u51FA\u3002</p>`,4),bn={class:"custom-container tip"},mn=n("p",{class:"custom-container-title"},"TIP",-1),_n=n("p",null,"yyFlexLexer\u5BF9\u8C61\u5305\u542B\u5176\u6574\u4E2A\u626B\u63CF\u72B6\u6001\u3002",-1),yn=s("\u56E0\u6B64\u4F60\u53EF\u4EE5\u4F7F\u7528\u8FD9\u6837\u7684\u5BF9\u8C61\u6765\u521B\u5EFA\u53EF\u91CD\u5165\u7684scanner\uFF0C\u4F46\u4E5F\u8BF7\u770B"),xn={href:"https://www.cs.virginia.edu/~cr4bd/flex-manual/Reentrant.html#Reentrant",target:"_blank",rel:"noopener noreferrer"},hn=s("\u53EF\u91CD\u5165(Reentrant)"),fn=s("\u3002"),wn=n("p",null,[s("\u4F60\u53EF\u4EE5\u5B9E\u4F8B\u5316\u540C\u4E00\u4E2A"),n("code",null,"yyFlexLexer"),s("\u7C7B\u7684\u591A\u4E2A\u5B9E\u4F8B\uFF0C\u4F60\u4E5F\u53EF\u4EE5\u5728\u540C\u4E00\u4E2A\u7A0B\u5E8F\u4E2D\u4F7F\u7528\u4E0A\u9762\u8BA8\u8BBA\u7684 "),n("code",null,"-P"),s(" \u9009\u9879\u5C06\u591A\u4E2AC++ scanner\u7C7B\u7EC4\u5408\u5728\u4E00\u8D77\u3002")],-1),gn=p(`<p>\u6700\u540E\uFF0C\u8BF7\u6CE8\u610F\uFF0C<code>%array</code>\u529F\u80FD\u5BF9 C++ scanner\u7C7B\u662F\u4E0D\u53EF\u7528\u7684\uFF1B\u4F60\u5FC5\u987B\u4F7F\u7528<code>%pointer</code>\uFF08\u8FD9\u662F\u9ED8\u8BA4\u7684\uFF09\u3002</p><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> example</h3><p>\u4E0B\u9762\u662F\u4E00\u4E2A\u7B80\u5355\u7684C++scanner\u7684\u4F8B\u5B50\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token comment">// An example of using the flex C++ scanner class.</span>

<span class="token operator">%</span><span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> mylineno <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token punctuation">}</span>

<span class="token operator">%</span>option noyywrap c<span class="token operator">++</span>

string  \\<span class="token string">&quot;[^\\n&quot;</span><span class="token punctuation">]</span><span class="token operator">+</span>\\&quot;

ws      <span class="token punctuation">[</span> \\t<span class="token punctuation">]</span><span class="token operator">+</span>

alpha   <span class="token punctuation">[</span>A<span class="token operator">-</span>Za<span class="token operator">-</span>z<span class="token punctuation">]</span>
dig     <span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>
<span class="token function">name</span>    <span class="token punctuation">(</span><span class="token punctuation">{</span>alpha<span class="token punctuation">}</span><span class="token operator">|</span><span class="token punctuation">{</span>dig<span class="token punctuation">}</span><span class="token operator">|</span>\\$<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>alpha<span class="token punctuation">}</span><span class="token operator">|</span><span class="token punctuation">{</span>dig<span class="token punctuation">}</span><span class="token operator">|</span><span class="token punctuation">[</span>_<span class="token punctuation">.</span>\\<span class="token operator">-</span><span class="token operator">/</span>$<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span>
num1    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">+</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">{</span>dig<span class="token punctuation">}</span><span class="token operator">+</span>\\<span class="token punctuation">.</span><span class="token operator">?</span><span class="token punctuation">(</span><span class="token punctuation">[</span>eE<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">+</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">{</span>dig<span class="token punctuation">}</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">?</span>
num2    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">+</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">{</span>dig<span class="token punctuation">}</span><span class="token operator">*</span>\\<span class="token punctuation">.</span><span class="token punctuation">{</span>dig<span class="token punctuation">}</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span>eE<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">+</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">{</span>dig<span class="token punctuation">}</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">?</span>
number  <span class="token punctuation">{</span>num1<span class="token punctuation">}</span><span class="token operator">|</span><span class="token punctuation">{</span>num2<span class="token punctuation">}</span>

<span class="token operator">%</span><span class="token operator">%</span>

<span class="token punctuation">{</span>ws<span class="token punctuation">}</span>    <span class="token comment">/* skip blanks and tabs */</span>

<span class="token string">&quot;/*&quot;</span>    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> c<span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">yyinput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span>
                <span class="token operator">++</span>mylineno<span class="token punctuation">;</span>

            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39;*&#39;</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">yyinput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">&#39;/&#39;</span><span class="token punctuation">)</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span>
                    <span class="token function">unput</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

<span class="token punctuation">{</span>number<span class="token punctuation">}</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;number &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">YYText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>

\\n        mylineno<span class="token operator">++</span><span class="token punctuation">;</span>

<span class="token punctuation">{</span>name<span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;name &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">YYText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>

<span class="token punctuation">{</span>string<span class="token punctuation">}</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;string &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">YYText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>

<span class="token operator">%</span><span class="token operator">%</span>

<span class="token comment">// This include is required if main() is an another source file.</span>
<span class="token comment">//#include &lt;FlexLexer.h&gt;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token comment">/* argc */</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token comment">/* argv */</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    FlexLexer<span class="token operator">*</span> lexer <span class="token operator">=</span> <span class="token keyword">new</span> yyFlexLexer<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>lexer<span class="token operator">-&gt;</span><span class="token function">yylex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br></div></div><p>\u5982\u679C\u4F60\u60F3\u521B\u5EFA\u591A\u4E2A\uFF08\u4E0D\u540C\u7684\uFF09scanner\u7C7B\uFF0C\u4F60\u53EF\u4EE5\u4F7F\u7528<code>-P</code>\u6807\u5FD7\uFF08\u6216\u8005<code>prefix=</code>\u9009\u9879\uFF09\u5C06\u6BCF\u4E2A<code>yyFlexLexer</code>\u91CD\u547D\u540D\u4E3A\u5176\u4ED6&#39;xxFlexLexer&#39;\u3002\u7136\u540E\uFF0C\u4F60\u53EF\u4EE5\u5728\u4F60\u7684\u5176\u4ED6\u6E90\u4E2D\u5305\u542B<code>&lt;FlexLexer.h&gt;</code>\uFF0C\u6BCF\u4E2Alexer\u7C7B\u4E00\u6B21\uFF0C\u9996\u5148\u5BF9<code>yyFlexLexer</code>\u8FDB\u884C\u91CD\u547D\u540D\uFF0C\u5982\u4E0B\u6240\u793A\u3002</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">yyFlexLexer</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">yyFlexLexer</span> <span class="token expression">xxFlexLexer</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FlexLexer.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">yyFlexLexer</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">yyFlexLexer</span> <span class="token expression">zzFlexLexer</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;FlexLexer.h&gt;</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>\u4F8B\u5982\uFF0C\u5982\u679C\u4F60\u5BF9\u4F60\u7684\u4E00\u4E2Ascanner\u4F7F\u7528<code>%option prefix=&quot;xx&quot;</code>\uFF0C\u5BF9\u53E6\u4E00\u4E2A\u4F7F\u7528<code>%option prefix=&quot;zz&quot;</code>\u3002</p>`,7);function vn(Ln,Fn){const a=t("ExternalLinkIcon");return o(),c(l,null,[n("h1",i,[k,d,n("a",b,[m,e(a)])]),n("blockquote",null,[n("p",null,[_,n("a",y,[x,e(a)]),h])]),f,w,n("p",null,[g,v,L,F,n("a",q,[C,e(a)]),Y,E,I,z,S,T,N,B,R]),O,n("ul",null,[V,A,P,n("li",null,[U,j,$,Z,n("a",D,[G,e(a)]),H,J,K]),M]),Q,n("p",null,[W,n("a",X,[nn,e(a)]),sn,an,en,pn,tn,on,cn,ln,rn,un,kn]),dn,n("div",bn,[mn,_n,n("p",null,[yn,n("a",xn,[hn,e(a)]),fn]),wn]),gn],64)}var Yn=r(u,[["render",vn]]);export{Yn as default};
