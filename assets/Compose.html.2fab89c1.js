import{r as e,o,c,a as n,b as t,F as l,e as p,d as s}from"./app.7d274c27.js";import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";const u={},r=p(`<h1 id="suspend\u51FD\u6570\u7684\u7EC4\u5408" tabindex="-1"><a class="header-anchor" href="#suspend\u51FD\u6570\u7684\u7EC4\u5408" aria-hidden="true">#</a> suspend\u51FD\u6570\u7684\u7EC4\u5408</h1><p>\u8FD9\u8282\u8BB2\u8FF0\u4E86\u591A\u79CD\u7EC4\u5408suspend\u51FD\u6570\u7684\u65B9\u5F0F</p><h2 id="\u9ED8\u8BA4\u987A\u5E8F\u6267\u884C" tabindex="-1"><a class="header-anchor" href="#\u9ED8\u8BA4\u987A\u5E8F\u6267\u884C" aria-hidden="true">#</a> \u9ED8\u8BA4\u987A\u5E8F\u6267\u884C</h2><p>\u5047\u8BBE\u6211\u4EEC\u6709\u4E24\u4E2A\u5B9E\u9645\u5DE5\u4F5C\u7684\u51FD\u6570</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">doSomethingUsefulOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span> <span class="token comment">// pretend we are doing something useful here</span>
    <span class="token keyword">return</span> <span class="token number">13</span>
<span class="token punctuation">}</span>

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">doSomethingUsefulTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span> <span class="token comment">// pretend we are doing something useful here, too</span>
    <span class="token keyword">return</span> <span class="token number">29</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>\u5982\u4F55\u987A\u5E8F\u8C03\u7528\u8FD9\u4E24\u4E2A\u51FD\u6570\u5E76\u6C42\u548C?</p><p>\u56E0\u4E3A\u5728<code>coroutine</code>\u4E2D\u7684\u4EE3\u7801\u8DDF\u4E00\u822C\u4EE3\u7801\u4E00\u6837 \u9ED8\u8BA4\u987A\u5E8F\u6267\u884C \u6240\u4EE5\u6211\u4EEC\u987A\u5E8F\u8C03\u7528\u5C31\u53EF\u4EE5\u4E86</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">val</span> time <span class="token operator">=</span> measureTimeMillis <span class="token punctuation">{</span>
    <span class="token keyword">val</span> one <span class="token operator">=</span> <span class="token function">doSomethingUsefulOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> two <span class="token operator">=</span> <span class="token function">doSomethingUsefulTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;The answer is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">one <span class="token operator">+</span> two</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Completed in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">time</span></span><span class="token string"> ms&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u53EF\u80FD\u4EA7\u751F\u8FD9\u6837\u7684\u7ED3\u679C</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>The answer is 42
Completed in 2007 ms
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="\u4F7F\u7528\u5F02\u6B65\u5E76\u53D1" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528\u5F02\u6B65\u5E76\u53D1" aria-hidden="true">#</a> \u4F7F\u7528\u5F02\u6B65\u5E76\u53D1</h2><p>\u53EF\u4EE5\u4F7F\u7528 <code>async</code> \u51FD\u6570\u6765\u8BA9\u4EE3\u7801\u5F02\u6B65\u6267\u884C</p>`,12),k={class:"custom-container tip"},d=n("p",{class:"custom-container-title"},"async \u4E0E launch",-1),m=s("\u4ECE\u6982\u5FF5\u4E0A\u8BB2 "),b={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html",target:"_blank",rel:"noopener noreferrer"},h=s("async"),g=s(" \u8DDF "),f={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html",target:"_blank",rel:"noopener noreferrer"},w=s("launch"),_=s("\u5F88\u50CF \u4F46"),y=n("code",null,"async",-1),v=s(" \u542F\u52A8\u4E00\u4E2A\u5355\u72EC\u7684\u5E76\u884C\u7684\u534F\u7A0B"),x=s("\u5DEE\u5F02\u5728\u4E8E"),S=n("code",null,"launch",-1),A=s("\u8FD4\u56DE\u4E00\u4E2A"),q=n("code",null,"Job",-1),T=s("\u5BF9\u8C61\u5E76\u4E14\u4E0D\u4F1A\u5E26\u6709\u7ED3\u679C\u503C"),U=n("br",null,null,-1),C=n("code",null,"async",-1),E=s("\u8FD4\u56DE\u4E00\u4E2A"),I={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/index.html",target:"_blank",rel:"noopener noreferrer"},O=s("Deferred"),B=s("(a light-weight non-blocking future that represents a promise to provide a result later)\u5B9E\u4F8B \u53EF\u4EE5\u6389\u7528"),L=n("code",null,"await",-1),$=s("\u7B49\u5F85\u5E76\u83B7\u53D6\u8BA1\u7B97\u503C \u540C\u65F6\u5B83\u662FJob\u7684\u5B50\u7C7B(\u53EF\u4EE5\u53D6\u6D88)"),D=p(`<div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">val</span> time <span class="token operator">=</span> measureTimeMillis <span class="token punctuation">{</span>
    <span class="token keyword">val</span> one <span class="token operator">=</span> async <span class="token punctuation">{</span> <span class="token function">doSomethingUsefulOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token keyword">val</span> two <span class="token operator">=</span> async <span class="token punctuation">{</span> <span class="token function">doSomethingUsefulTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;The answer is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">one<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> two<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Completed in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">time</span></span><span class="token string"> ms&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u53EF\u80FD\u7684\u7ED3\u679C\u5982\u4E0B</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>The answer is 42
Completed in 1017 ms
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="lazy-async" tabindex="-1"><a class="header-anchor" href="#lazy-async" aria-hidden="true">#</a> Lazy async</h2>`,4),G=n("code",null,"async",-1),z=s("\u53EF\u4EE5\u8BBE\u7F6E\u53C2\u6570"),F=n("code",null,"start",-1),M=s("\u4E3A"),N={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-start/-l-a-z-y/index.html",target:"_blank",rel:"noopener noreferrer"},V=s("CoroutineStart.LAZY"),Y=p(`<p>Lazy\u6A21\u5F0F\u4E0B \u53EA\u6709\u8C03\u7528<code>await</code>\u6216\u8005<code>start</code> \u534F\u7A0B\u624D\u4F1A\u5F00\u59CB\u6267\u884C</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">val</span> time <span class="token operator">=</span> measureTimeMillis <span class="token punctuation">{</span>
    <span class="token keyword">val</span> one <span class="token operator">=</span> <span class="token function">async</span><span class="token punctuation">(</span>start <span class="token operator">=</span> CoroutineStart<span class="token punctuation">.</span>LAZY<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">doSomethingUsefulOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token keyword">val</span> two <span class="token operator">=</span> <span class="token function">async</span><span class="token punctuation">(</span>start <span class="token operator">=</span> CoroutineStart<span class="token punctuation">.</span>LAZY<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">doSomethingUsefulTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token comment">// some computation</span>
    one<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// start the first one</span>
    two<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// start the second one</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;The answer is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">one<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> two<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Completed in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">time</span></span><span class="token string"> ms&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>\u5982\u679C\u4E4B\u524D\u7684\u4EE3\u7801\u6BCF\u4E2A\u534F\u7A0B\u90FD\u6CA1\u6709\u8C03\u7528<code>start</code>\u7684\u8BDD \u90A3\u4E48\u7ED3\u679C\u4F1A\u8DDF\u987A\u5E8F\u6267\u884C\u4E00\u6837</p><p><code>async(start = CoroutineStart.LAZY)</code> \u662F\u6807\u51C6\u51FD\u6570 <code>lazy</code> \u5728suspend\u51FD\u6570\u4E2D\u7684\u66FF\u4EE3</p><h2 id="\u5F02\u6B65\u98CE\u683C\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#\u5F02\u6B65\u98CE\u683C\u51FD\u6570" aria-hidden="true">#</a> \u5F02\u6B65\u98CE\u683C\u51FD\u6570</h2><p>https://kotlinlang.org/docs/composing-suspending-functions.html#async-style-functions</p><p>\u901A\u8FC7\u4F7F\u7528<code>GlobalScope</code>\u5F15\u7528\u6765\u9000\u51FA\u7ED3\u6784\u5316\u5E76\u53D1(opt-out of the structured concurrency)\u7684<code>async</code>\u534F\u7A0B\u6784\u5EFA\u5668 \u53EF\u4EE5\u5B9A\u4E49async\u98CE\u683C\u7684\u51FD\u6570\u6765\u8C03\u7528<code>doSomethingUsefulOne</code>\u548C<code>doSomethingUsefulTwo</code></p><div class="custom-container tip"><p class="custom-container-title">GlobalScope</p><p>GlobalScope is a delicate API that can backfire in non-trivial ways, one of which will be explained below, so you must explicitly opt-in into using GlobalScope with @OptIn(DelicateCoroutinesApi::class).</p></div><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token comment">// The result type of somethingUsefulOneAsync is Deferred&lt;Int&gt;</span>
<span class="token annotation builtin">@OptIn</span><span class="token punctuation">(</span>DelicateCoroutinesApi<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">fun</span> <span class="token function">somethingUsefulOneAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> GlobalScope<span class="token punctuation">.</span><span class="token function">async</span> <span class="token punctuation">{</span>
    <span class="token function">doSomethingUsefulOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// The result type of somethingUsefulTwoAsync is Deferred&lt;Int&gt;</span>
<span class="token annotation builtin">@OptIn</span><span class="token punctuation">(</span>DelicateCoroutinesApi<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">fun</span> <span class="token function">somethingUsefulTwoAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> GlobalScope<span class="token punctuation">.</span><span class="token function">async</span> <span class="token punctuation">{</span>
    <span class="token function">doSomethingUsefulTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>\u4F46\u4E0A\u8FF0\u7684<code>xxxAsync</code>\u51FD\u6570<strong>\u4E0D</strong>\u662F<em>suspend</em>\u51FD\u6570 \u5B83\u4EEC\u53EF\u4EE5\u968F\u5904\u8C03\u7528 \u540C\u65F6\u5B83\u4EEC\u7684\u4F7F\u7528\u5DF2\u77E5\u6697\u793A\u7740\u5F02\u6B65\u4EE3\u7801\u6267\u884C</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token comment">// note that we don&#39;t have \`runBlocking\` to the right of \`main\` in this example</span>
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> time <span class="token operator">=</span> measureTimeMillis <span class="token punctuation">{</span>
        <span class="token comment">// we can initiate async actions outside of a coroutine</span>
        <span class="token keyword">val</span> one <span class="token operator">=</span> <span class="token function">somethingUsefulOneAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">val</span> two <span class="token operator">=</span> <span class="token function">somethingUsefulTwoAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// but waiting for a result must involve either suspending or blocking.</span>
        <span class="token comment">// here we use \`runBlocking { ... }\` to block the main thread while waiting for the result</span>
        runBlocking <span class="token punctuation">{</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;The answer is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">one<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> two<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Completed in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">time</span></span><span class="token string"> ms&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>\u4E0A\u8FF0\u4EE3\u7801\u4EC5\u4F9B\u6F14\u793A \u56E0\u4E3A\u5176\u4ED6\u8BED\u8A00\u91CC\u9762\u8FD9\u79CD\u65B9\u5F0F\u5F88\u6D41\u884C</p><p>\u4F46\u662F<strong>\u5F3A\u70C8\u4E0D\u5EFA\u8BAE</strong>\u5728Kotlin coroutine\u91CC\u9762\u8FD9\u4E48\u5199</p><p>\u5982\u679C<code>val one = somethingUsefulOneAsync()</code> \u548C <code>one.await()</code>\u4E4B\u95F4\u8FD8\u6709\u522B\u7684\u4EE3\u7801 \u5E76\u4E14\u51FA\u73B0\u4E86\u903B\u8F91\u9519\u8BEF\u6216\u8005\u629B\u51FA\u4E86\u5F02\u5E38 \u7136\u540E\u7A0B\u5E8F\u4E2D\u6B62</p><p>\u4E00\u822C\u60C5\u51B5\u4E0B \u4E00\u4E2A\u5168\u5C40\u7684error-handle\u4F1A\u6355\u83B7\u5F02\u5E38 \u751F\u6210\u65E5\u5FD7 \u7136\u540E\u62A5\u544A\u7ED9\u5F00\u53D1\u8005 \u4F46\u8FD9\u4E2A\u7A0B\u5E8F\u80FD\u7EE7\u7EED\u6267\u884C\u5176\u4ED6\u64CD\u4F5C</p><p>\u5728\u4E0A\u8FF0\u4EE3\u7801\u4E2D \u5373\u4F7F\u542F\u52A8<code>xxxAsync</code>\u7684\u64CD\u4F5C\u5DF2\u4E2D\u6B62 \u5B83\u4E5F\u4F1A\u5728\u540E\u53F0\u7EE7\u7EED\u6267\u884C</p></div><p>\u5728\u7ED3\u6784\u5316\u5E76\u53D1\u4E2D \u4E0A\u8FF0\u95EE\u9898\u4E0D\u4F1A\u51FA\u73B0</p><h2 id="async\u7ED3\u6784\u5316\u5E76\u53D1" tabindex="-1"><a class="header-anchor" href="#async\u7ED3\u6784\u5316\u5E76\u53D1" aria-hidden="true">#</a> async\u7ED3\u6784\u5316\u5E76\u53D1</h2><p><a href="#%E4%BD%BF%E7%94%A8%E5%BC%82%E6%AD%A5%E5%B9%B6%E5%8F%91">\u53C2\u8003\u524D\u4F8B</a> \u63D0\u53D6\u51FA\u4E00\u4E2A\u5E76\u53D1\u64CD\u4F5C\u7684\u51FD\u6570</p>`,15),Z=s("\u56E0\u4E3A"),j=n("code",null,"async",-1),J=s("\u534F\u7A0B\u6784\u5EFA\u5668(coroutine builder)\u88AB\u5B9A\u4E49\u4E3A"),K=n("code",null,"CoroutineScope",-1),P=s("\u7684\u62D3\u5C55 \u6240\u4EE5\u9700\u8981\u4F7F\u7528"),R={href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html",target:"_blank",rel:"noopener noreferrer"},W=s("coroutineScope"),X=p(`<div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">concurrentSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token operator">=</span> coroutineScope <span class="token punctuation">{</span>
    <span class="token keyword">val</span> one <span class="token operator">=</span> async <span class="token punctuation">{</span> <span class="token function">doSomethingUsefulOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token keyword">val</span> two <span class="token operator">=</span> async <span class="token punctuation">{</span> <span class="token function">doSomethingUsefulTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    one<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> two<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u8FD9\u79CD\u5199\u6CD5\u7684\u8BDD \u5982\u679C\u5728<code>concurrentSum</code>\u4E2D\u51FA\u73B0\u9519\u8BEF \u4F1A\u629B\u51FA\u4E00\u4E2A\u5F02\u5E38 \u6240\u6709\u542F\u52A8(launch)\u7684\u534F\u7A0B\u4E5F\u80FD\u88AB\u53D6\u6D88</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">val</span> time <span class="token operator">=</span> measureTimeMillis <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;The answer is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression"><span class="token function">concurrentSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Completed in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">time</span></span><span class="token string"> ms&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>cancel\u4F1A\u901A\u8FC7coroutine\u5C42\u6B21\u4F20\u64AD</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">failedConcurrentSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token operator">:</span> ArithmeticException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Computation failed with ArithmeticException&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">failedConcurrentSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token operator">=</span> coroutineScope <span class="token punctuation">{</span>
    <span class="token keyword">val</span> one <span class="token operator">=</span> async<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token punctuation">{</span> 
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">delay</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span> <span class="token comment">// Emulates very long computation</span>
            <span class="token number">42</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;First child was cancelled&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">val</span> two <span class="token operator">=</span> async<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token punctuation">{</span> 
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Second child throws an exception&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token function">ArithmeticException</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    one<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> two<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Second child throws an exception
First child was cancelled
Computation failed with ArithmeticException
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u6CE8\u610F\u89C2\u5BDF\u8F93\u51FA\u7ED3\u679C</p>`,7);function H(Q,nn){const a=e("ExternalLinkIcon");return o(),c(l,null,[r,n("div",k,[d,n("p",null,[m,n("a",b,[h,t(a)]),g,n("a",f,[w,t(a)]),_,y,v]),n("p",null,[x,S,A,q,T,U,C,E,n("a",I,[O,t(a)]),B,L,$])]),D,n("p",null,[G,z,F,M,n("a",N,[V,t(a)])]),Y,n("p",null,[Z,j,J,K,P,n("a",R,[W,t(a)])]),X],64)}var tn=i(u,[["render",H]]);export{tn as default};
